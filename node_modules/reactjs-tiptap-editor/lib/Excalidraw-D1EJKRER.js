import { N as Z, n as k, m as z } from "./index-BWx1Mchx.js";
import { N as j, c as C, R as P, n as V, g as y } from "./dom-dataset-CHDbKz5J.js";
import { jsxs as x, jsx as n } from "react/jsx-runtime";
import { useState as o, useCallback as v, useEffect as T, useRef as B } from "react";
import { w as U, x as $, A as M, y as F, z as X, F as G, B as K, K as Y } from "./RichTextEditor-DWN9FEob.js";
import { n as q } from "./index-zcKfSGd5.js";
import { Resizable as J } from "re-resizable";
let I;
function D() {
  try {
    return I || (I = q()), I;
  } catch {
    throw new Error("Error EventEmitter");
  }
}
const S = "OPEN_EXCALIDRAW_SETTING_MODAL";
function Q(e, r) {
  D().on(e, r);
}
function ee(e, r) {
  D().off(e, r);
}
function fe(e) {
  D().emit(S, e);
}
const te = ({ editor: e }) => {
  const [r, u] = o(null), [c, m] = o({}), [l, h] = o({ elements: [], appState: { isLoading: !1 }, files: null }), [g, a] = o(!1), [f, p] = o(!0), [w, d] = o(null), _ = v(
    (i) => {
      i && import("@excalidraw/excalidraw").then((t) => {
        u(t.Excalidraw);
      }).catch(d).finally(() => p(!1));
    },
    [p]
  ), N = v((i) => {
    setTimeout(() => {
      i.refresh();
    });
  }, []), L = v((i, t, s) => {
    m({
      elements: i,
      appState: { isLoading: !1 },
      files: s
    });
  }, []), b = v(() => {
    if (!r) {
      a(!1);
      return;
    }
    e.chain().focus().setExcalidraw({ data: c }).run(), a(!1);
  }, [r, e, c, a]);
  return T(() => {
    const i = (t) => {
      (t == null ? void 0 : t.editor) === e && (a(!0), t && h(t.data));
    };
    return Q(S, i), () => {
      ee(S, i);
    };
  }, [e, a]), T(() => {
    !f && r && g && setTimeout(() => {
      window.dispatchEvent(new Event("resize"));
    }, 400);
  }, [f, r, g]), /* @__PURE__ */ x(
    U,
    {
      onOpenChange: a,
      open: g,
      children: [
        /* @__PURE__ */ n($, { asChild: !0, children: /* @__PURE__ */ n(
          M,
          {
            action: () => a(!0),
            icon: "Excalidraw",
            tooltip: "Excalidraw"
          }
        ) }),
        /* @__PURE__ */ x(F, { className: "richtext-z-[99999] !richtext-max-w-[1300px]", children: [
          /* @__PURE__ */ n(X, { children: "Excalidraw" }),
          /* @__PURE__ */ x("div", { style: { height: "100%", borderWidth: 1 }, children: [
            f && /* @__PURE__ */ n("p", { children: "Loading..." }),
            w && /* @__PURE__ */ n("p", { children: w && w.message || "Error" }),
            /* @__PURE__ */ n(
              "div",
              {
                ref: _,
                style: { width: "100%", height: 600 },
                children: !f && !w && r ? /* @__PURE__ */ n(
                  r,
                  {
                    initialData: l,
                    langCode: "en",
                    onChange: L,
                    ref: N
                  }
                ) : null
              }
            )
          ] }),
          /* @__PURE__ */ n(G, { children: /* @__PURE__ */ n(
            K,
            {
              onClick: b,
              type: "button",
              children: "Save changes"
            }
          ) })
        ] })
      ]
    }
  );
}, re = "_wrap_15k3c_1", ne = "_renderWrap_15k3c_7", ae = "_handlerWrap_15k3c_30", A = {
  wrap: re,
  renderWrap: ne,
  handlerWrap: ae
}, ie = 10, se = 200, R = 15, W = { width: "100%", height: "100%", maxWidth: "100%" };
function oe({ editor: e, node: r, updateAttributes: u }) {
  const c = B(null), m = e.isActive(le.name), { data: l, width: h, height: g } = r.attrs, [a, f] = o(null), [p, w] = o(!0), [d, _] = o(null), [N, L] = o(100), b = v((t) => () => {
    L(
      (s) => Y(t === "minus" ? s - R : s + R, ie, se)
    );
  }, []);
  T(() => {
    let t = !1;
    return import("@excalidraw/excalidraw").then((s) => {
      t || (c.current = s.exportToSvg);
    }).catch((s) => !t && _(s)).finally(() => !t && w(!1)), () => {
      t = !0;
    };
  }, [l]), T(() => {
    let t = !1;
    return (async () => {
      if (!c.current || t || p || d || !l)
        return;
      const E = await c.current(l);
      t || (E.setAttribute("width", "100%"), E.setAttribute("height", "100%"), E.setAttribute("display", "block"), f(E));
    })(), () => {
      t = !0;
    };
  }, [l, p, d]);
  const i = (t) => {
    u({ width: t.width, height: t.height });
  };
  return /* @__PURE__ */ n(j, { className: C(A.wrap, m && A.isActive), children: /* @__PURE__ */ n(
    J,
    {
      size: { width: Number.parseInt(h), height: Number.parseInt(g) },
      onResizeStop: (t, s, E, O) => {
        i({
          width: Number.parseInt(h) + O.width,
          height: Number.parseInt(g) + O.height
        });
      },
      children: /* @__PURE__ */ x(
        "div",
        {
          className: C(A.renderWrap, "render-wrapper"),
          style: { ...W, overflow: "hidden" },
          children: [
            d && /* @__PURE__ */ n("div", { style: W, children: /* @__PURE__ */ n("p", { children: d.message || d }) }),
            p && /* @__PURE__ */ n("p", { children: "Loading..." }),
            !p && !d && a && /* @__PURE__ */ n(
              "div",
              {
                dangerouslySetInnerHTML: { __html: (a == null ? void 0 : a.outerHTML) ?? "" },
                style: {
                  height: "100%",
                  maxHeight: "100%",
                  padding: 24,
                  overflow: "hidden",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  transform: `scale(${N / 100})`,
                  transition: "all ease-in-out .3s"
                }
              }
            ),
            /* @__PURE__ */ x("div", { className: A.handlerWrap, children: [
              /* @__PURE__ */ n(
                M,
                {
                  action: b("minus"),
                  icon: "ZoomOut",
                  tooltip: "Zoom Out"
                }
              ),
              /* @__PURE__ */ n(
                M,
                {
                  action: b("plus"),
                  icon: "ZoomIn",
                  tooltip: "Zoom In"
                }
              )
            ] })
          ]
        }
      )
    }
  ) });
}
const H = { elements: [] }, le = /* @__PURE__ */ Z.create({
  name: "excalidraw",
  group: "block",
  selectable: !0,
  atom: !0,
  draggable: !0,
  inline: !1,
  addAttributes() {
    return {
      defaultShowPicker: {
        default: !1
      },
      createUser: {
        default: null
      },
      width: {
        default: "100%",
        parseHTML: y("width")
      },
      height: {
        default: 240,
        parseHTML: y("height")
      },
      data: {
        default: H,
        parseHTML: y("data", !0)
      }
    };
  },
  addOptions() {
    var e;
    return {
      ...(e = this.parent) == null ? void 0 : e.call(this),
      HTMLAttributes: {
        class: "excalidraw"
      },
      button: ({ editor: r }) => ({
        component: te,
        componentProps: {
          editor: r
        }
      })
    };
  },
  parseHTML() {
    return [
      {
        tag: "div[class=excalidraw]"
      }
    ];
  },
  renderHTML({ HTMLAttributes: e, node: r }) {
    return ["div", z(this.options.HTMLAttributes, e, V(r))];
  },
  addCommands() {
    return {
      setExcalidraw: (e) => ({ tr: r, commands: u, chain: c }) => {
        var m, l, h;
        return e = e || {}, e.data = e.data || H, ((h = (l = (m = r.selection) == null ? void 0 : m.node) == null ? void 0 : l.type) == null ? void 0 : h.name) == this.name ? u.updateAttributes(this.name, e) : c().insertContent({
          type: this.name,
          attrs: e
        }).run();
      }
    };
  },
  addNodeView() {
    return P(oe);
  },
  addInputRules() {
    return [
      k({
        find: /^\$excalidraw\$$/,
        type: this.type,
        getAttributes: () => ({ width: "100%" })
      })
    ];
  }
});
export {
  le as E,
  fe as t
};
