{"version":3,"file":"shared-Sq5P6lf6.js","sources":["../src/prism/utils/shared.js"],"sourcesContent":["/**\n * Creates a nested pattern where all occurrences of the string `<self>` are replaced with the pattern itself.\n *\n * @param {string} pattern\n * @param {number} depthLog2\n */\nvar nested = (pattern, depthLog2) => {\n\tfor (var i = 0; i < depthLog2; i++) {\n\t\tpattern = pattern.replace(/<self>/g, `(?:${pattern})`);\n\t}\n\treturn pattern.replace(/<self>/g, '[]');\n}\n\n/**\n * Replaces all placeholders \"<n>\" of given pattern with the n-th replacement (zero based).\n *\n * Note: This is a simple text based replacement. Be careful when using backreferences!\n *\n * @param {string} pattern the given pattern.\n * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n * @returns the pattern with all placeholders replaced with their corresponding replacements.\n * @example replace(/a<0>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n */\nvar replace = (pattern, replacements) =>\n\tpattern.replace(/<(\\d+)>/g, (m, index) => `(?:${replacements[+index]})`);\n\n/**\n * @param {string} pattern \n * @param {string[]} replacements \n * @param {string=} flags\n */\nvar re = (pattern, replacements, flags) => RegExp(replace(pattern, replacements), flags);\n\nexport { nested, replace, re }\n"],"names":[],"mappings":"AAMG,IAAC,SAAS,CAAC,SAAS,cAAc;AACpC,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AACnC,cAAU,QAAQ,QAAQ,WAAW,MAAM,OAAO,GAAG;AAAA,EACvD;AACC,SAAO,QAAQ,QAAQ,WAAW,IAAI;AACvC;AAYG,IAAC,UAAU,CAAC,SAAS,iBACvB,QAAQ,QAAQ,YAAY,CAAC,GAAG,UAAU,MAAM,aAAa,CAAC,KAAK,CAAC,GAAG;AAOrE,IAAC,KAAK,CAAC,SAAS,cAAc,UAAU,OAAO,QAAQ,SAAS,YAAY,GAAG,KAAK;"}