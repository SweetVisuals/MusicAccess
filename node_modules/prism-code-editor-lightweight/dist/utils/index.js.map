{"version":3,"file":"index.js","sources":["../../src/utils/index.ts"],"sourcesContent":["import { InputSelection, PrismEditor } from \"../index.js\"\nimport { numLines, isChrome, isWebKit } from \"../core.js\"\nimport { addListener, getLineEnd, getLineStart } from \"./local.js\"\n\nlet prevSelection: InputSelection | 0\n\n/** Escapes all special regex characters with a backslash and returns the escaped string. */\nconst regexEscape = (str: string) => str.replace(/[$+?|.^*()[\\]{}\\\\]/g, \"\\\\$&\")\n\n/** Returns the string between the position and the previous \\n. */\nconst getLineBefore = (text: string, position: number) =>\n\ttext.slice(getLineStart(text, position), position)\n\n/**\n * Gets all lines that are at least partially between `start` and `end`.\n * @param text Text to search in.\n * @param start Start of the selection.\n * @param end End of the selection. Defaults to `start`.\n * @returns A tuple containing an array of lines, the starting position of the first line,\n * and the ending position of the last line.\n */\nconst getLines = (text: string, start: number, end = start) =>\n\t[\n\t\ttext.slice((start = getLineStart(text, start)), (end = getLineEnd(text, end))).split(\"\\n\"),\n\t\tstart,\n\t\tend,\n\t] as const\n\n/**\n * Searches a full line for a token that matches a selector and contains `position`\n * within the specified margins. Tokens are searched in reverse document order which means\n * children are searched before their parents.\n * @param editor Editor you want to search in.\n * @param selector CSS selector for the tokens you want to search for.\n * @param marginLeft How far to the left of the token the position can be. Defaults to 0.\n * @param marginRight How far to the right of the token the position can be. Defaults to `marginLeft`.\n * @param position Position to search in. Defaults to `selectionStart`.\n * @returns A span element if one's found or undefined if not.\n * @example\n * This will return a string token if the cursor\n * is at least 1 character inside a string token\n * ```javascript\n * getClosestToken(editor, '.string', -1)\n * ```\n */\nconst getClosestToken = (\n\teditor: PrismEditor,\n\tselector: string,\n\tmarginLeft = 0,\n\tmarginRight = marginLeft,\n\tposition = editor.getSelection()[0],\n) => {\n\tconst value = editor.value\n\tconst line = editor.wrapper.children[numLines(value, 0, position)]\n\t// We unfortunitely have to include elements, else we can't get empty tokens\n\tconst walker = document.createTreeWalker(line, 5)\n\n\tlet node = walker.lastChild()\n\tlet offset = getLineEnd(value, position) + 1 - position - (<Text>node).length\n\n\twhile (-offset <= marginRight && (node = walker.previousNode())) {\n\t\tif (node.lastChild) continue\n\t\toffset -= (<Text>node).length || 0\n\n\t\tif (offset <= marginLeft) {\n\t\t\tfor (; node != line; node = node.parentNode!) {\n\t\t\t\tif ((<Element>node).matches?.(selector)) return <HTMLSpanElement>node\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Gets the current language at a position.\n * Useful if you want to run different logic based on the language.\n * @param editor Editor to search in.\n * @param position Position to search in. Defaults to `selectionStart`.\n */\nconst getLanguage = (editor: PrismEditor, position?: number) =>\n\tgetClosestToken(editor, '[class*=\"language-\"]', 0, 0, position)?.className.match(\n\t\t/language-(\\S*)/,\n\t)![1] || editor.options.language\n\n/**\n * Inserts text into the editor (unless it's read-only) while keeping undo/redo history.\n * Focuses the `textarea` if it isn't already.\n * @param editor Target editor.\n * @param text Text to insert.\n * @param start Position to start the insertion. Defaults to `selectionStart`.\n * @param end Position to end the insertion. Defaults to `start` if specified, else `selectionEnd`.\n * @param newCursorStart New starting position for the cursor. Defaults to the end of the inserted text.\n * @param newCursorEnd New ending position for the cursor. Defaults to `newCursorStart`.\n */\nconst insertText = (\n\teditor: PrismEditor,\n\ttext: string,\n\tstart?: number | null,\n\tend?: number | null,\n\tnewCursorStart?: number | null,\n\tnewCursorEnd?: number | null,\n) => {\n\tif (editor.options.readOnly) return\n\tprevSelection = editor.getSelection()\n\tend ??= start\n\n\tlet textarea = editor.textarea\n\tlet value = editor.value\n\t// Bug inserting new lines at the end if the editor ends with an empty line\n\tlet avoidBug =\n\t\tisChrome && !value[end ?? prevSelection[1]] && /\\n$/.test(text) && /^$|\\n$/.test(value)\n\tlet removeListener: () => any\n\n\teditor.focused || textarea.focus()\n\tif (start != null) textarea.setSelectionRange(start, end!)\n\n\tif (newCursorStart != null) {\n\t\tremoveListener = addListener(editor, \"update\", () => {\n\t\t\ttextarea.setSelectionRange(\n\t\t\t\tnewCursorStart,\n\t\t\t\tnewCursorEnd ?? newCursorStart,\n\t\t\t\t(<InputSelection>prevSelection)[2],\n\t\t\t)\n\t\t\tremoveListener()\n\t\t})\n\t}\n\n\t// Only Safari dispatches a beforeinput event\n\tisWebKit || textarea.dispatchEvent(new InputEvent(\"beforeinput\", { data: text }))\n\n\t// Inserting escaped HTML in Chrome and Safari instead for much better performance\n\tif (isChrome || isWebKit) {\n\t\tif (avoidBug) {\n\t\t\t// This means the last new line won't be inserted if there's\n\t\t\t// no selection, but that's less annoying than the bug.\n\t\t\ttextarea.selectionEnd--\n\t\t\ttext = text.slice(0, -1)\n\t\t}\n\t\t// New line at the end is always ignored in Safari\n\t\tif (isWebKit) text += \"\\n\"\n\t\tdocument.execCommand(\n\t\t\ttext ? \"insertHTML\" : \"delete\",\n\t\t\tfalse,\n\t\t\ttext.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\"),\n\t\t)\n\t\tif (avoidBug) textarea.selectionStart++\n\t} else document.execCommand(text ? \"insertText\" : \"delete\", false, text)\n\n\tprevSelection = 0\n}\n\n/**\n * Returns a 4 bit integer where each bit represents whether\n * each modifier is pressed in the order Shift, Meta, Ctrl, Alt\n * ```javascript\n * e.altKey && e.ctrlKey && e.shiftKey && !e.metaKey\n * // is equivalent to\n * getModifierCode(e) == 0b1011\n * ```\n */\nconst getModifierCode = (\n\te: KeyboardEvent, // @ts-expect-error\n): number => e.altKey + e.ctrlKey * 2 + e.metaKey * 4 + e.shiftKey * 8\n\nexport {\n\tregexEscape,\n\tgetLineBefore,\n\tgetLines,\n\tgetClosestToken,\n\tgetLanguage,\n\tinsertText,\n\tgetModifierCode,\n\tprevSelection,\n}\n"],"names":[],"mappings":";;AAII,IAAA;AAGJ,MAAM,cAAc,CAAC,QAAgB,IAAI,QAAQ,uBAAuB,MAAM;AAGxE,MAAA,gBAAgB,CAAC,MAAc,aACpC,KAAK,MAAM,aAAa,MAAM,QAAQ,GAAG,QAAQ;AAUlD,MAAM,WAAW,CAAC,MAAc,OAAe,MAAM,UACpD;AAAA,EACC,KAAK,MAAO,QAAQ,aAAa,MAAM,KAAK,GAAK,MAAM,WAAW,MAAM,GAAG,CAAE,EAAE,MAAM,IAAI;AAAA,EACzF;AAAA,EACA;AACD;AAmBD,MAAM,kBAAkB,CACvB,QACA,UACA,aAAa,GACb,cAAc,YACd,WAAW,OAAO,aAAa,EAAE,CAAC,MAC9B;AACJ,QAAM,QAAQ,OAAO;AACf,QAAA,OAAO,OAAO,QAAQ,SAAS,SAAS,OAAO,GAAG,QAAQ,CAAC;AAEjE,QAAM,SAAS,SAAS,iBAAiB,MAAM,CAAC;AAE5C,MAAA,OAAO,OAAO,UAAU;AAC5B,MAAI,SAAS,WAAW,OAAO,QAAQ,IAAI,IAAI,WAAkB,KAAM;AAEvE,SAAO,CAAC,UAAU,gBAAgB,OAAO,OAAO,iBAAiB;AAChE,QAAI,KAAK,UAAW;AACpB,cAAiB,KAAM,UAAU;AAEjC,QAAI,UAAU,YAAY;AACzB,aAAO,QAAQ,MAAM,OAAO,KAAK,YAAa;AAC7C,YAAc,KAAM,UAAU,QAAQ,EAA2B,QAAA;AAAA,MAAA;AAAA,IAClE;AAAA,EACD;AAEF;AAQM,MAAA,cAAc,CAAC,QAAqB,aACzC,gBAAgB,QAAQ,wBAAwB,GAAG,GAAG,QAAQ,GAAG,UAAU;AAAA,EAC1E;AACD,EAAG,CAAC,KAAK,OAAO,QAAQ;AAYzB,MAAM,aAAa,CAClB,QACA,MACA,OACA,KACA,gBACA,iBACI;AACA,MAAA,OAAO,QAAQ,SAAU;AAC7B,kBAAgB,OAAO,aAAa;AAC5B,gBAAA;AAER,MAAI,WAAW,OAAO;AACtB,MAAI,QAAQ,OAAO;AAEnB,MAAI,WACH,YAAY,CAAC,MAAM,OAAO,cAAc,CAAC,CAAC,KAAK,MAAM,KAAK,IAAI,KAAK,SAAS,KAAK,KAAK;AACnF,MAAA;AAEG,SAAA,WAAW,SAAS,MAAM;AACjC,MAAI,SAAS,KAAe,UAAA,kBAAkB,OAAO,GAAI;AAEzD,MAAI,kBAAkB,MAAM;AACV,qBAAA,YAAY,QAAQ,UAAU,MAAM;AAC3C,eAAA;AAAA,QACR;AAAA,QACA,gBAAgB;AAAA,QACC,cAAe,CAAC;AAAA,MAClC;AACe,qBAAA;AAAA,IAAA,CACf;AAAA,EAAA;AAIU,cAAA,SAAS,cAAc,IAAI,WAAW,eAAe,EAAE,MAAM,KAAK,CAAC,CAAC;AAGhF,MAAI,YAAY,UAAU;AACzB,QAAI,UAAU;AAGJ,eAAA;AACF,aAAA,KAAK,MAAM,GAAG,EAAE;AAAA,IAAA;AAGxB,QAAI,SAAkB,SAAA;AACb,aAAA;AAAA,MACR,OAAO,eAAe;AAAA,MACtB;AAAA,MACA,KAAK,QAAQ,MAAM,OAAO,EAAE,QAAQ,MAAM,MAAM;AAAA,IACjD;AACA,QAAI,SAAmB,UAAA;AAAA,EAAA,MACR,UAAA,YAAY,OAAO,eAAe,UAAU,OAAO,IAAI;AAEvD,kBAAA;AACjB;AAWA,MAAM,kBAAkB,CACvB,MACY,EAAE,SAAS,EAAE,UAAU,IAAI,EAAE,UAAU,IAAI,EAAE,WAAW;"}