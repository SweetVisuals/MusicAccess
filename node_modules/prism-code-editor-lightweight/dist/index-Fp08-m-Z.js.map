{"version":3,"file":"index-Fp08-m-Z.js","sources":["../src/languages/shared/index.ts"],"sourcesContent":["import { CommentTokens, InputSelection, Language, PrismEditor, languageMap } from \"../..\"\nimport { getClosestToken, getLineBefore } from \"../../utils\"\n\nconst clikeIndent = /[([{][^)\\]}]*$|^[^.]*\\b(?:case .+?|default):\\s*$/,\n\tisBracketPair = /\\[]|\\(\\)|{}/,\n\txmlOpeningTag =\n\t\t/<(?![?!\\d#@])([^\\s/=>$<%]+)(?:\\s(?:\\s*[^\\s/\"'=>]+(?:\\s*=\\s*(?!\\s)(?:\"[^\"]*\"|'[^']*'|[^\\s\"'=>]+(?=[\\s>]))?|(?=[\\s/>])))+)?\\s*>[ \\t]*$/,\n\txmlClosingTag = /^<\\/(?!\\d)[^\\s/=>$<%]+\\s*>/,\n\topenBracket = /[([{][^)\\]}]*$/\n\nconst testBracketPair = ([start, end]: InputSelection, value: string) => {\n\treturn isBracketPair.test(value[start - 1] + value[end])\n}\n\nconst clikeComment: CommentTokens = {\n\tline: \"//\",\n\tblock: [\"/*\", \"*/\"],\n}\n\nconst voidTags = /^(?:area|base|w?br|col|embed|hr|img|input|link|meta|source|track)$/i\n\nconst isOpen = (match: RegExpMatchArray | null, voidTags?: RegExp) =>\n\t!!match && !voidTags?.test(match[1])\n\nconst htmlAutoIndent = (tagPattern: RegExp, voidTags?: RegExp): Language[\"autoIndent\"] => [\n\t([start], value) =>\n\t\tisOpen(value.slice(0, start).match(tagPattern), voidTags) ||\n\t\topenBracket.test(getLineBefore(value, start)),\n\t(selection, value) =>\n\t\ttestBracketPair(selection, value) ||\n\t\t(isOpen(value.slice(0, selection[0]).match(tagPattern), voidTags) &&\n\t\t\txmlClosingTag.test(value.slice(selection[1]))),\n]\n\nconst markupComment: CommentTokens = {\n\tblock: [\"<!--\", \"-->\"],\n}\n\nconst markupLanguage = (\n\tcomment = markupComment,\n\ttagPattern = xmlOpeningTag,\n\tvoidTags?: RegExp,\n): Language => ({\n\tcomments: comment,\n\tautoIndent: htmlAutoIndent(tagPattern, voidTags),\n\tautoCloseTags: ([start, end], value, editor) => {\n\t\treturn autoCloseTags(editor, start, end, value, tagPattern, voidTags)\n\t},\n})\n\nconst autoCloseTags = (\n\teditor: PrismEditor,\n\tstart: number,\n\tend: number,\n\tvalue: string,\n\ttagPattern: RegExp,\n\tvoidTags?: RegExp,\n) => {\n\tif (start == end) {\n\t\tlet match: string | RegExpExecArray | null = tagPattern.exec(value.slice(0, start) + \">\")\n\t\tlet tagMatcher = editor.extensions.matchTags\n\t\tif (match && ((match = match[1] || \"\"), !voidTags?.test(match))) {\n\t\t\tif (tagMatcher) {\n\t\t\t\tlet { pairs, tags } = tagMatcher\n\t\t\t\tfor (let i = tags.length; i; ) {\n\t\t\t\t\tlet tag = tags[--i]\n\t\t\t\t\tif (tag[1] >= start && tag[4] && tag[5] && tag[3] == match && pairs[i] == null) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn `</${match}>`\n\t\t}\n\t}\n}\n\nconst bracketIndenting = (comments = clikeComment, indentPattern = openBracket): Language => ({\n\tcomments,\n\tautoIndent: [\n\t\t([start], value) => indentPattern.test(getLineBefore(value, start)),\n\t\ttestBracketPair,\n\t],\n})\n\nconst markupTemplateLang = (name: string, comments: CommentTokens): Language =>\n\t(languageMap[name] = {\n\t\tcomments,\n\t\tautoIndent: htmlAutoIndent(xmlClosingTag, voidTags),\n\t\tautoCloseTags: ([start, end], value, editor) => {\n\t\t\treturn getClosestToken(editor, \".\" + name, 0, 0, start)\n\t\t\t\t? \"\"\n\t\t\t\t: autoCloseTags(editor, start, end, value, xmlOpeningTag, voidTags)\n\t\t},\n\t})\n\nexport {\n\tclikeIndent,\n\tisBracketPair,\n\txmlOpeningTag,\n\txmlClosingTag,\n\topenBracket,\n\tautoCloseTags,\n\ttestBracketPair,\n\tclikeComment,\n\tbracketIndenting,\n\thtmlAutoIndent,\n\tvoidTags,\n\tmarkupTemplateLang,\n\tmarkupLanguage,\n\tmarkupComment,\n}\n"],"names":["voidTags"],"mappings":";;AAGM,MAAA,cAAc,oDACnB,gBAAgB,eAChB,gBACC,uIACD,gBAAgB,8BAChB,cAAc;AAEf,MAAM,kBAAkB,CAAC,CAAC,OAAO,GAAG,GAAmB,UAAkB;AACjE,SAAA,cAAc,KAAK,MAAM,QAAQ,CAAC,IAAI,MAAM,GAAG,CAAC;AACxD;AAEA,MAAM,eAA8B;AAAA,EACnC,MAAM;AAAA,EACN,OAAO,CAAC,MAAM,IAAI;AACnB;AAEA,MAAM,WAAW;AAEjB,MAAM,SAAS,CAAC,OAAgCA,cAC/C,CAAC,CAAC,SAAS,CAACA,WAAU,KAAK,MAAM,CAAC,CAAC;AAE9B,MAAA,iBAAiB,CAAC,YAAoBA,cAA8C;AAAA,EACzF,CAAC,CAAC,KAAK,GAAG,UACT,OAAO,MAAM,MAAM,GAAG,KAAK,EAAE,MAAM,UAAU,GAAGA,SAAQ,KACxD,YAAY,KAAK,cAAc,OAAO,KAAK,CAAC;AAAA,EAC7C,CAAC,WAAW,UACX,gBAAgB,WAAW,KAAK,KAC/B,OAAO,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC,EAAE,MAAM,UAAU,GAAGA,SAAQ,KAC/D,cAAc,KAAK,MAAM,MAAM,UAAU,CAAC,CAAC,CAAC;AAC/C;AAEA,MAAM,gBAA+B;AAAA,EACpC,OAAO,CAAC,QAAQ,KAAK;AACtB;AAEA,MAAM,iBAAiB,CACtB,UAAU,eACV,aAAa,eACbA,eACe;AAAA,EACf,UAAU;AAAA,EACV,YAAY,eAAe,YAAYA,SAAQ;AAAA,EAC/C,eAAe,CAAC,CAAC,OAAO,GAAG,GAAG,OAAO,WAAW;AAC/C,WAAO,cAAc,QAAQ,OAAO,KAAK,OAAO,YAAYA,SAAQ;AAAA,EAAA;AAEtE;AAEA,MAAM,gBAAgB,CACrB,QACA,OACA,KACA,OACA,YACAA,cACI;AACJ,MAAI,SAAS,KAAK;AACb,QAAA,QAAyC,WAAW,KAAK,MAAM,MAAM,GAAG,KAAK,IAAI,GAAG;AACpF,QAAA,aAAa,OAAO,WAAW;AAC/B,QAAA,UAAW,QAAQ,MAAM,CAAC,KAAK,IAAK,CAACA,WAAU,KAAK,KAAK,IAAI;AAChE,UAAI,YAAY;AACX,YAAA,EAAE,OAAO,KAAA,IAAS;AACb,iBAAA,IAAI,KAAK,QAAQ,KAAK;AAC1B,cAAA,MAAM,KAAK,EAAE,CAAC;AAClB,cAAI,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,SAAS,MAAM,CAAC,KAAK,MAAM;AAC/E;AAAA,UAAA;AAAA,QACD;AAAA,MACD;AAED,aAAO,KAAK,KAAK;AAAA,IAAA;AAAA,EAClB;AAEF;AAEA,MAAM,mBAAmB,CAAC,WAAW,cAAc,gBAAgB,iBAA2B;AAAA,EAC7F;AAAA,EACA,YAAY;AAAA,IACX,CAAC,CAAC,KAAK,GAAG,UAAU,cAAc,KAAK,cAAc,OAAO,KAAK,CAAC;AAAA,IAClE;AAAA,EAAA;AAEF;AAEA,MAAM,qBAAqB,CAAC,MAAc,aACxC,YAAY,IAAI,IAAI;AAAA,EACpB;AAAA,EACA,YAAY,eAAe,eAAe,QAAQ;AAAA,EAClD,eAAe,CAAC,CAAC,OAAO,GAAG,GAAG,OAAO,WAAW;AAC/C,WAAO,gBAAgB,QAAQ,MAAM,MAAM,GAAG,GAAG,KAAK,IACnD,KACA,cAAc,QAAQ,OAAO,KAAK,OAAO,eAAe,QAAQ;AAAA,EAAA;AAErE;"}