{"version":3,"file":"templating-CGPRy7qI.js","sources":["../src/prism/utils/templating.js"],"sourcesContent":["import { tokenizeText, Token, resolve, withoutTokenizer } from \"../core.js\";\n\nvar embeddedIn = hostGrammar => (code, templateGrammar) => {\n\tvar host = resolve(hostGrammar);\n\tvar hostCode = '';\n\tvar tokenStack = [];\n\tvar stackLength = 0;\n\tvar templateTokens = withoutTokenizer(code, templateGrammar);\n\tvar i = 0, l = templateTokens.length, position = 0;\n\n\twhile (i < l) {\n\t\tvar token = templateTokens[i++];\n\t\tvar length = token.length;\n\t\tvar type = token.type;\n\t\tif (type && type.slice(0, 6) != 'ignore') {\n\t\t\ttokenStack[stackLength++] = [position, token];\n\t\t\thostCode += ' '.repeat(length);\n\t\t}\n\t\telse {\n\t\t\thostCode += code.slice(position, position + length);\n\t\t}\n\t\tposition += length;\n\t}\n\n\tvar j = 0;\n\tvar position = 0;\n\n\t/** @param {(string | Token)[]} tokens */\n\tvar walkTokens = tokens => {\n\t\tfor (var i = 0; j < stackLength && i < tokens.length; i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tvar content = token.content;\n\t\t\t\n\t\t\tif (Array.isArray(content)) {\n\t\t\t\twalkTokens(content);\n\t\t\t} else {\n\t\t\t\tvar length = token.length;\n\t\t\t\tvar replacement = [];\n\t\t\t\tvar offset, t, k = 0;\n\t\t\t\tvar pos = position;\n\n\t\t\t\twhile ([offset, t] = tokenStack[j], offset >= position && offset < position + length) {\n\t\t\t\t\tif (pos < offset) replacement[k++] = hostCode.slice(pos, offset);\n\t\t\t\t\tpos = offset + t.length;\n\t\t\t\t\treplacement[k++] = t;\n\t\t\t\t\tif (++j == stackLength) break;\n\t\t\t\t}\n\t\t\t\tposition += length;\n\t\t\t\t\n\t\t\t\tif (k) {\n\t\t\t\t\tif (pos < position) replacement[k++] = hostCode.slice(pos, position);\n\t\t\t\t\tif (content) {\n\t\t\t\t\t\ttoken.content = replacement;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttokens.splice(i, 1, ...replacement);\n\t\t\t\t\t\ti += k - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tvar tokens = host ? tokenizeText(hostCode, host) : [hostCode];\n\twalkTokens(tokens);\n\n\treturn tokens;\n}\n\nexport { embeddedIn }\n"],"names":["tokens","i","token","length"],"mappings":";AAEG,IAAC,aAAa,iBAAe,CAAC,MAAM,oBAAoB;AAC1D,MAAI,OAAO,QAAQ,WAAW;AAC9B,MAAI,WAAW;AACf,MAAI,aAAa,CAAE;AACnB,MAAI,cAAc;AAClB,MAAI,iBAAiB,iBAAiB,MAAM,eAAe;AAC3D,MAAI,IAAI,GAAG,IAAI,eAAe,QAAQ,WAAW;AAEjD,SAAO,IAAI,GAAG;AACb,QAAI,QAAQ,eAAe,GAAG;AAC9B,QAAI,SAAS,MAAM;AACnB,QAAI,OAAO,MAAM;AACjB,QAAI,QAAQ,KAAK,MAAM,GAAG,CAAC,KAAK,UAAU;AACzC,iBAAW,aAAa,IAAI,CAAC,UAAU,KAAK;AAC5C,kBAAY,IAAI,OAAO,MAAM;AAAA,IAChC,OACO;AACJ,kBAAY,KAAK,MAAM,UAAU,WAAW,MAAM;AAAA,IACrD;AACE,gBAAY;AAAA,EACd;AAEC,MAAI,IAAI;AACR,MAAI,WAAW;AAGf,MAAI,aAAa,CAAAA,YAAU;AAC1B,aAASC,KAAI,GAAG,IAAI,eAAeA,KAAID,QAAO,QAAQC,MAAK;AAC1D,UAAIC,SAAQF,QAAOC,EAAC;AACpB,UAAI,UAAUC,OAAM;AAEpB,UAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,mBAAW,OAAO;AAAA,MACtB,OAAU;AACN,YAAIC,UAASD,OAAM;AACnB,YAAI,cAAc,CAAE;AACpB,YAAI,QAAQ,GAAG,IAAI;AACnB,YAAI,MAAM;AAEV,eAAO,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,GAAG,UAAU,YAAY,SAAS,WAAWC,SAAQ;AACrF,cAAI,MAAM,OAAQ,aAAY,GAAG,IAAI,SAAS,MAAM,KAAK,MAAM;AAC/D,gBAAM,SAAS,EAAE;AACjB,sBAAY,GAAG,IAAI;AACnB,cAAI,EAAE,KAAK,YAAa;AAAA,QAC7B;AACI,oBAAYA;AAEZ,YAAI,GAAG;AACN,cAAI,MAAM,SAAU,aAAY,GAAG,IAAI,SAAS,MAAM,KAAK,QAAQ;AACnE,cAAI,SAAS;AACZ,YAAAD,OAAM,UAAU;AAAA,UACtB,OAAY;AACN,YAAAF,QAAO,OAAOC,IAAG,GAAG,GAAG,WAAW;AAClC,YAAAA,MAAK,IAAI;AAAA,UACf;AAAA,QACA;AAAA,MACA;AAAA,IACA;AAAA,EACA;AAEC,MAAI,SAAS,OAAO,aAAa,UAAU,IAAI,IAAI,CAAC,QAAQ;AAC5D,aAAW,MAAM;AAEjB,SAAO;AACR;"}