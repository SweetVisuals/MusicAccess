{"version":3,"file":"jsx-shared-C8dTPQ4U.js","sources":["../src/prism/utils/jsx-shared.js"],"sourcesContent":["import { Token, languages, tokenize, withoutTokenizer } from '../core.js';\nimport { clone, insertBefore } from './language.js';\nimport { replace, re } from './shared.js';\n\nvar space = /\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\//.source;\nvar braces = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})*\\}/.source;\nvar spread = replace(/\\{<0>*\\.{3}(?:[^{}]|<1>)*\\}/.source, [space, braces]);\n\nvar isText = token => token && (!token.type || token.type == 'plain-text');\n\n/**\n * @param {(string | Token)[]} tokens\n * @param {string} code\n * @param {number} position\n */\nvar walkTokens = (tokens, code, position) => {\n\tfor (var i = 0, openedTags = [], l = 0; i < tokens.length; i++) {\n\t\tvar token = tokens[i];\n\t\tvar length = token.length;\n\t\tvar type = token.type;\n\t\tvar notTagNorBrace = !type;\n\t\tvar last, tag, start, plainText, content;\n\n\t\tif (type) {\n\t\t\tcontent = token.content;\n\t\t\tif (type == 'tag') {\n\t\t\t\t// We found a tag, now find its kind\n\t\t\t\tstart = content[0].length;\n\t\t\t\ttag = content[2] ? code.substr(position + start, content[1].length) : '';\n\t\t\t\tif (start > 1) {\n\t\t\t\t\t// Closing tag\n\t\t\t\t\tif (l && openedTags[l - 1][0] == tag) {\n\t\t\t\t\t\t// Pop matching opening tag\n\t\t\t\t\t\tl--;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (content[content.length - 1].length < 2) {\n\t\t\t\t\t\t// Opening tag\n\t\t\t\t\t\topenedTags[l++] = [tag, 0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (l && type == 'punctuation') {\n\t\t\t\tlast = openedTags[l - 1];\n\t\t\t\tif (content == '{') last[1]++;\n\t\t\t\telse if (last[1] && content == '}') last[1]--;\n\t\t\t\telse {\n\t\t\t\t\tnotTagNorBrace = !\"}()[]\".includes(content);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnotTagNorBrace = true;\n\t\t\t}\n\t\t}\n\t\tif (notTagNorBrace && l && !openedTags[l - 1][1]) {\n\t\t\t// Here we are inside a tag, and not inside a JSX context.\n\t\t\t// That's plain text: drop any tokens matched.\n\t\t\tstart = position;\n\n\t\t\t// And merge text with adjacent text\n\t\t\tif (isText(tokens[i + 1])) {\n\t\t\t\tlength += tokens[i + 1].length;\n\t\t\t\ttokens.splice(i + 1, 1);\n\t\t\t}\n\t\t\tif (isText(tokens[i - 1])) {\n\t\t\t\tstart -= tokens[--i].length;\n\t\t\t\ttokens.splice(i, 1);\n\t\t\t}\n\n\t\t\tplainText = code.slice(start, position + length);\n\t\t\ttokens[i] = new Token('plain-text', plainText, plainText);\n\t\t}\n\t\tposition += length;\n\t}\n\treturn tokens;\n};\n\n/**\n * Adds JSX tags along with the custom tokenizer to the grammar\n * @param {any} grammar\n * @param {string} name\n */\nvar addJsxTag = (grammar, name) => {\n\tinsertBefore(languages[name] = grammar = clone(grammar), 'regex', {\n\t\t'tag': {\n\t\t\tpattern: re(\n\t\t\t\t/<\\/?(?:(?!\\d)[^\\s/=><%]+(?:<0>(?:<0>*(?:[^\\s<>/={*]+(?:<0>*=<0>*(?!\\s)(?:\"[^\"]*\"|'[^']*'|<1>)?|(?=[\\s/>]))|<2>))+)?<0>*\\/?)?>/.source, [space, braces, spread], 'g'\n\t\t\t),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /^<\\/?|\\/?>$/,\n\t\t\t\t'tag': {\n\t\t\t\t\tpattern: /^[^\\s/]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'namespace': /^[^:]+:/,\n\t\t\t\t\t\t'class-name': /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'script': {\n\t\t\t\t\t// Allow for two levels of nesting\n\t\t\t\t\tpattern: re(/(=<0>*)<1>/.source, [space, braces]),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: name = 'language-' + name,\n\t\t\t\t\tinside: grammar\n\t\t\t\t},\n\t\t\t\t'spread': {\n\t\t\t\t\tpattern: RegExp(spread),\n\t\t\t\t\talias: name,\n\t\t\t\t\tinside: grammar\n\t\t\t\t},\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: re(/(=<0>*)(?:\"[^\"]*\"|'[^']*')/.source, [space]),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^[\"']|[\"']$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'comment': grammar['comment'],\n\t\t\t\t'attr-equals': /=/,\n\t\t\t\t'attr-name': {\n\t\t\t\t\tpattern: /\\S+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'namespace': /^[^:]+:/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tgrammar[tokenize] = (code, grammar) => walkTokens(withoutTokenizer(code, grammar), code, 0);\n}\n\nexport { addJsxTag, space, braces, spread }\n"],"names":["grammar"],"mappings":"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"}