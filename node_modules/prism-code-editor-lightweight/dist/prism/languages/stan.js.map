{"version":3,"file":"stan.js","sources":["../../../src/prism/languages/stan.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { boolean } from '../utils/patterns.js';\n\n// https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\n\nvar higherOrderFunctions = /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;\n\nvar expression = {\n\tpattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n\tlookbehind: true\n};\n\nexpression.inside = languages.stan = {\n\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n\t'string': {\n\t\t// String literals can contain spaces and any printable ASCII characters except for \" and \\\n\t\t// https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n\t\tpattern: /\"[ !#-[\\]-~]*\"/g,\n\t\tgreedy: true\n\t},\n\t'directive': {\n\t\tpattern: /^([ \\t]*)#include\\b.*/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n\n\t'function-arg': {\n\t\tpattern: RegExp(\n\t\t\t`(${higherOrderFunctions.source}\\\\s*\\\\(\\\\s*)[a-zA-Z]\\\\w*`\n\t\t),\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'constraint': {\n\t\tpattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'expression': expression,\n\t\t\t'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n\t\t\t'operator': /=/,\n\t\t\t'punctuation': /^<|>$|,/\n\t\t}\n\t},\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n\t\t\talias: 'program-block'\n\t\t},\n\t\t/\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|increment_log_prob|int?|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/,\n\t\t// these are functions that are known to take another function as their first argument.\n\t\thigherOrderFunctions\n\t],\n\t'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n\t'number': /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n\t'boolean': boolean,\n\n\t'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>/*+-]=?|['^%~?:]/,\n\t'punctuation': /[()[\\]{},;]/\n};\n"],"names":[],"mappings":";;AAKA,IAAI,uBAAuB;AAE3B,IAAI,aAAa;AAAA,EAChB,SAAS;AAAA,EACT,YAAY;AACb;AAEA,WAAW,SAAS,UAAU,OAAO;AAAA,EACpC,WAAW;AAAA,EACX,UAAU;AAAA;AAAA;AAAA,IAGT,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,gBAAgB;AAAA,IACf,SAAS;AAAA,MACR,IAAI,qBAAqB,MAAM;AAAA,IAC/B;AAAA,IACD,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,cAAc;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,MACP,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,eAAe;AAAA,IAClB;AAAA,EACE;AAAA,EACD,WAAW;AAAA,IACV;AAAA,MACC,SAAS;AAAA,MACT,OAAO;AAAA,IACP;AAAA,IACD;AAAA;AAAA,IAEA;AAAA,EACA;AAAA,EACD,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EAEX,YAAY;AAAA,EACZ,eAAe;AAChB;"}