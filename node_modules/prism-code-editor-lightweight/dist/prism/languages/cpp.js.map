{"version":3,"file":"cpp.js","sources":["../../../src/prism/languages/cpp.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { extend, insertBefore } from '../utils/language.js';\nimport { boolean } from '../utils/patterns.js';\nimport { re } from '../utils/shared.js';\nimport './c.js';\n\nvar keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n\nvar cpp = languages.cpp = extend('c', {\n\t'class-name': [\n\t\t{\n\t\t\tpattern: RegExp(`(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!${keyword.source})\\\\w+`),\n\t\t\tlookbehind: true\n\t\t},\n\t\t// This is intended to capture the class name of method implementations like:\n\t\t//   void foo::bar() const {}\n\t\t// However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n\t\t// it starts with an uppercase letter. This approximation should give decent results.\n\t\t/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n\t\t// This will capture the class name before destructors like:\n\t\t//   Foo::~Foo() {}\n\t\t/\\b[a-z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n\t\t// This also intends to capture the class name of method implementations but here the class has template\n\t\t// parameters, so it can't be a namespace (until C++ adds generic namespaces).\n\t\t/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n\t],\n\t'keyword': keyword,\n\t'number': {\n\t\tpattern: /(?:\\b0b[01']+|\\b0x(?:[a-f\\d']+(?:\\.[a-f\\d']*)?|\\.[a-f\\d']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/gi,\n\t\tgreedy: true\n\t},\n\t'operator': /->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|>>=?|<<=?|[%&|^!=<>/*+-]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|x?or|x?or_eq)\\b/,\n\t'boolean': boolean\n});\n\ninsertBefore(cpp, 'string', {\n\t'module': {\n\t\t// https://en.cppreference.com/w/cpp/language/modules\n\t\tpattern: re(\n\t\t\t/(\\b(?:import|module)\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\\n\"])*\"|<[^<>\\n]*>|<0>(?:\\s*:\\s*<0>)?|:\\s*<0>)/.source, [`\\\\b(?!${keyword.source})\\\\w+(?:\\\\s*\\\\.\\\\s*\\\\w+)*\\\\b`], 'g'\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'string': /^[<\"][\\s\\S]+/,\n\t\t\t'operator': /:/,\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t'raw-string': {\n\t\tpattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/g,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t}\n});\n\ninsertBefore(cpp, 'keyword', {\n\t'generic-function': {\n\t\tpattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n\t\tinside: {\n\t\t\t'function': /^\\w+/,\n\t\t\t'generic': {\n\t\t\t\tpattern: /<[\\s\\S]+/,\n\t\t\t\talias: 'class-name',\n\t\t\t\tinside: cpp\n\t\t\t}\n\t\t}\n\t}\n});\n\ninsertBefore(cpp, 'operator', {\n\t'double-colon': {\n\t\tpattern: /::/,\n\t\talias: 'punctuation'\n\t}\n});\n\nvar baseClauseInside = Object.assign({}, cpp);\n\ninsertBefore(cpp, 'class-name', {\n\t// the base clause is an optional list of parent classes\n\t// https://en.cppreference.com/w/cpp/language/class\n\t'base-clause': {\n\t\tpattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/g,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: baseClauseInside\n\t}\n});\n\ninsertBefore(baseClauseInside, 'double-colon', {\n\t// All untokenized words that are not namespaces should be class names\n\t'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n});\n"],"names":[],"mappings":";;;;;AAMA,IAAI,UAAU;AAEd,IAAI,MAAM,UAAU,MAAM,OAAO,KAAK;AAAA,EACrC,cAAc;AAAA,IACb;AAAA,MACC,SAAS,OAAO,qDAAqD,QAAQ,MAAM,OAAO;AAAA,MAC1F,YAAY;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKD;AAAA;AAAA;AAAA,IAGA;AAAA;AAAA;AAAA,IAGA;AAAA,EACA;AAAA,EACD,WAAW;AAAA,EACX,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,YAAY;AAAA,EACZ,WAAW;AACZ,CAAC;AAED,aAAa,KAAK,UAAU;AAAA,EAC3B,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,MACR;AAAA,MAAqG,CAAC,SAAS,QAAQ,MAAM,8BAA8B;AAAA,MAAG;AAAA,IAC9J;AAAA,IACD,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,eAAe;AAAA,IAClB;AAAA,EACE;AAAA,EACD,cAAc;AAAA,IACb,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACT;AACA,CAAC;AAED,aAAa,KAAK,WAAW;AAAA,EAC5B,oBAAoB;AAAA,IACnB,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,YAAY;AAAA,MACZ,WAAW;AAAA,QACV,SAAS;AAAA,QACT,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACA;AAAA,EACA;AACA,CAAC;AAED,aAAa,KAAK,YAAY;AAAA,EAC7B,gBAAgB;AAAA,IACf,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AACA,CAAC;AAED,IAAI,mBAAmB,OAAO,OAAO,CAAA,GAAI,GAAG;AAE5C,aAAa,KAAK,cAAc;AAAA;AAAA;AAAA,EAG/B,eAAe;AAAA,IACd,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AACA,CAAC;AAED,aAAa,kBAAkB,gBAAgB;AAAA;AAAA,EAE9C,cAAc;AACf,CAAC;"}