{"version":3,"file":"rust.js","sources":["../../../src/prism/languages/rust.js"],"sourcesContent":["import { languages, rest } from '../core.js';\nimport { boolean } from '../utils/patterns.js';\nimport { nested } from '../utils/shared.js';\n\nvar multilineComment = nested(/\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source, 2);\nvar string = {\n\tpattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/g,\n\tgreedy: true\n};\nvar paramsInside = {\n\t'closure-punctuation': {\n\t\tpattern: /^\\||\\|$/,\n\t\talias: 'punctuation'\n\t}\n};\n\nparamsInside[rest] = languages.rust = {\n\t'comment': {\n\t\tpattern: RegExp(\"//.*|\" + multilineComment, 'g'),\n\t\tgreedy: true\n\t},\n\t'string': string,\n\t'char': {\n\t\tpattern: /b?'(?:\\\\(?:x[0-7][a-fA-F\\d]|u\\{(?:[a-fA-F\\d]_*){1,6}\\}|.)|[^\\\\\\n\\t'])'/g,\n\t\tgreedy: true\n\t},\n\t'attribute': {\n\t\tpattern: /#!?\\[(?:[^[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/g,\n\t\tgreedy: true,\n\t\talias: 'attr-name',\n\t\tinside: {\n\t\t\t'string': string\n\t\t}\n\t},\n\n\t// Closure params should not be confused with bitwise OR |\n\t'closure-params': {\n\t\tpattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/g,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: paramsInside\n\t},\n\n\t'lifetime-annotation': {\n\t\tpattern: /'\\w+/,\n\t\talias: 'symbol'\n\t},\n\n\t'fragment-specifier': {\n\t\tpattern: /(\\$\\w+:)[a-z]+/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t},\n\t'variable': /\\$\\w+/,\n\n\t'function-definition': {\n\t\tpattern: /(\\bfn\\s+)\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'type-definition': {\n\t\tpattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'class-name'\n\t},\n\t'module-declaration': [\n\t\t{\n\t\t\tpattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'namespace'\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'namespace',\n\t\t\tinside: {\n\t\t\t\t'punctuation': /::/\n\t\t\t}\n\t\t}\n\t],\n\t// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n\t// primitives and str\n\t// https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n\t'keyword': /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield|bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/,\n\t// functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n\t// and Rust's naming conventions recommend snake_case anyway.\n\t// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n\t'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n\t'macro': {\n\t\tpattern: /\\b\\w+!/,\n\t\talias: 'property'\n\t},\n\t'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\n\t'class-name': /\\b[A-Z]\\w*\\b/,\n\n\t'namespace': {\n\t\tpattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n\t\tinside: {\n\t\t\t'punctuation': /::/\n\t\t}\n\t},\n\n\t// Hex, oct, bin, dec numbers with visual separators and type suffix\n\t'number': /\\b(?:0x[a-fA-F\\d](?:_?[a-fA-F\\d])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n\t'boolean': boolean,\n\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[()[\\]{},:;]/,\n\t'operator': /&&|\\|\\||=>|>>=?|<<=?|[%&|^!=<>/*+-]=?|[@?]/\n};\n"],"names":[],"mappings":";;;AAIA,IAAI,mBAAmB,OAAO,+CAAsD,CAAC;AACrF,IAAI,SAAS;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AACT;AACA,IAAI,eAAe;AAAA,EAClB,uBAAuB;AAAA,IACtB,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AACA;AAEA,aAAa,IAAI,IAAI,UAAU,OAAO;AAAA,EACrC,WAAW;AAAA,IACV,SAAS,OAAO,UAAU,kBAAkB,GAAG;AAAA,IAC/C,QAAQ;AAAA,EACR;AAAA,EACD,UAAU;AAAA,EACV,QAAQ;AAAA,IACP,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,MACP,UAAU;AAAA,IACb;AAAA,EACE;AAAA;AAAA,EAGD,kBAAkB;AAAA,IACjB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,EACR;AAAA,EAED,uBAAuB;AAAA,IACtB,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EAED,sBAAsB;AAAA,IACrB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,EAEZ,uBAAuB;AAAA,IACtB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,mBAAmB;AAAA,IAClB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,sBAAsB;AAAA,IACrB;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,IACD;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,QAAQ;AAAA,QACP,eAAe;AAAA,MACnB;AAAA,IACA;AAAA,EACE;AAAA;AAAA;AAAA;AAAA,EAID,WAAW;AAAA;AAAA;AAAA;AAAA,EAIX,YAAY;AAAA,EACZ,SAAS;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,EACZ,cAAc;AAAA,EAEd,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,eAAe;AAAA,IAClB;AAAA,EACE;AAAA;AAAA,EAGD,UAAU;AAAA,EACV,WAAW;AAAA,EACX,eAAe;AAAA,EACf,YAAY;AACb;"}