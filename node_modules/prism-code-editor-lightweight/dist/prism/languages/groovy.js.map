{"version":3,"file":"groovy.js","sources":["../../../src/prism/languages/groovy.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { boolean, clikeComment } from '../utils/patterns.js';\n\nvar expression = {\n\tpattern: /[\\s\\S]+/\n}\n\nvar interpolation = {\n\tpattern: /((?:^|[^\\\\$])(?:\\\\\\\\)*)\\$(?:\\w+|\\{[^{}]*\\})/,\n\tlookbehind: true,\n\tinside: {\n\t\t'interpolation-punctuation': {\n\t\t\tpattern: /^\\$\\{?|\\}$/,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'expression': expression\n\t}\n};\n\nexpression.inside = languages.groovy = {\n\t'comment': clikeComment(),\n\t'shebang': {\n\t\tpattern: /#!.+/g,\n\t\talias: 'comment',\n\t\tgreedy: true\n\t},\n\t'interpolation-string': {\n\t\t// TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n\t\t// simple division (see JS regex), so find a fix maybe?\n\t\tpattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|([\"/])(?:\\\\.|(?!\\1)[^\\\\\\n])*\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/g,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': interpolation,\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string': {\n\t\t// https://groovy-lang.org/syntax.html#_dollar_slashy_string\n\t\tpattern: /'''(?:\\\\[\\s\\S]|[^\\\\])*?'''|'(?:\\\\.|[^\\\\\\n'])*'/g,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int?|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throws?|trait|transient|try|void|volatile|while)\\b/,\n\t'boolean': boolean,\n\t'annotation': {\n\t\tpattern: /(^|[^.])@\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t},\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b(?:0b[01_]+|0x[a-f\\d_]+(?:\\.[a-f\\d_p-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n\t'operator': {\n\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*\\.|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|--|\\+\\+|&&|\\|\\||\\*\\*=?|->|>>>?=?|<<=?|<=>?|[%&|^!=<>/*+-]=?)/,\n\t\tlookbehind: true\n\t},\n\t'spock-block': /\\b(?:and|cleanup|expect|given|setup|[tw]hen|where):/,\n\t'punctuation': /\\.+|[()[\\]{},:;$]/\n};\n"],"names":[],"mappings":";;AAGA,IAAI,aAAa;AAAA,EAChB,SAAS;AACV;AAEA,IAAI,gBAAgB;AAAA,EACnB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,QAAQ;AAAA,IACP,6BAA6B;AAAA,MAC5B,SAAS;AAAA,MACT,OAAO;AAAA,IACP;AAAA,IACD,cAAc;AAAA,EAChB;AACA;AAEA,WAAW,SAAS,UAAU,SAAS;AAAA,EACtC,WAAW,aAAc;AAAA,EACzB,WAAW;AAAA,IACV,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,EACR;AAAA,EACD,wBAAwB;AAAA;AAAA;AAAA,IAGvB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,iBAAiB;AAAA,MACjB,UAAU;AAAA,IACb;AAAA,EACE;AAAA,EACD,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,cAAc;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,MACP,eAAe;AAAA,IAClB;AAAA,EACE;AAAA,EACD,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,IACX,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA,EACD,eAAe;AAAA,EACf,eAAe;AAChB;"}