{"version":3,"file":"wren.js","sources":["../../../src/prism/languages/wren.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { boolean, clikePunctuation } from '../utils/patterns.js';\n\n// https://wren.io/\n\nlanguages.wren = {\n\t// Multiline comments in Wren can have nested multiline comments\n\t// Comments: // and /* */\n\t'comment': {\n\t\t// support 3 levels of nesting\n\t\t// regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n\t\tpattern: /\\/\\/.*|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//g,\n\t\tgreedy: true\n\t},\n\n\t// Triple quoted strings are multiline but cannot have interpolation (raw strings)\n\t// Based on prism-python.js\n\t'triple-quoted-string': {\n\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/g,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\n\t'string-literal': {\n\t\t// A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n\t\tpattern: /(^|[^\\\\\"])\"(?:\\\\[\\s\\S]|[^\\\\\"%]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/g,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\t// \"%(interpolation)\"\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'expression': {\n\t\t\t\t\t\tpattern: /^(..)[\\s\\S]+(?=.)/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tinside: 'wren'\n\t\t\t\t\t},\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /.+/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\n\t// #!/usr/bin/env wren on the first line\n\t'hashbang': {\n\t\tpattern: /^#!\\/.+/g,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\n\t// Attributes are special keywords to add meta data to classes\n\t'attribute': {\n\t\t// #! attributes are stored in class properties\n\t\t// #!myvar = true\n\t\t// #attributes are not stored and dismissed at compilation\n\t\tpattern: /#!?[ \\tã€€]*\\w+/,\n\t\talias: 'keyword'\n\t},\n\t'class-name': [\n\t\t{\n\t\t\t// class definition\n\t\t\t// class Meta {}\n\t\t\tpattern: /(\\bclass\\s+)\\w+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// A class must always start with an uppercase.\n\t\t// File.read\n\t\t/\\b[A-Z][a-z\\d_]*\\b/,\n\t],\n\n\t// A constant can be a variable, class, property or method. Just named in all uppercase letters\n\t'constant': /\\b[A-Z][A-Z\\d_]*\\b/,\n\n\t'null': {\n\t\tpattern: /\\bnull\\b/,\n\t\talias: 'keyword'\n\t},\n\t'keyword': /\\b(?:as|break|class|construct|continue|else|for|foreign|i[fns]|import|return|static|super|this|var|while)\\b/,\n\t'boolean': boolean,\n\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n\n\t// Functions can be Class.method()\n\t'function': /\\b[a-z_]\\w*(?=\\s*[({])/i,\n\n\t'operator': /<<|>>|[!=<>]=?|&&|\\|\\||[%&|^~?:/*+-]|\\.{2,3}/,\n\t'punctuation': clikePunctuation\n};\n"],"names":[],"mappings":";;AAKA,UAAU,OAAO;AAAA;AAAA;AAAA,EAGhB,WAAW;AAAA;AAAA;AAAA,IAGV,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA;AAAA;AAAA,EAID,wBAAwB;AAAA,IACvB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA,EAED,kBAAkB;AAAA;AAAA,IAEjB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,iBAAiB;AAAA;AAAA,QAEhB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,QAAQ;AAAA,UACP,cAAc;AAAA,YACb,SAAS;AAAA,YACT,YAAY;AAAA,YACZ,QAAQ;AAAA,UACR;AAAA,UACD,6BAA6B;AAAA,YAC5B,SAAS;AAAA,YACT,OAAO;AAAA,UACP;AAAA,QACN;AAAA,MACI;AAAA,MACD,UAAU;AAAA,IACb;AAAA,EACE;AAAA;AAAA,EAGD,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA;AAAA,EAGD,aAAa;AAAA;AAAA;AAAA;AAAA,IAIZ,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,cAAc;AAAA,IACb;AAAA;AAAA;AAAA,MAGC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA;AAAA;AAAA,IAGD;AAAA,EACA;AAAA;AAAA,EAGD,YAAY;AAAA,EAEZ,QAAQ;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA;AAAA,EAGV,YAAY;AAAA,EAEZ,YAAY;AAAA,EACZ,eAAe;AAChB;"}