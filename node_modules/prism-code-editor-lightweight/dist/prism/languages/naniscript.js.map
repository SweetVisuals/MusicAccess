{"version":3,"file":"naniscript.js","sources":["../../../src/prism/languages/naniscript.js"],"sourcesContent":["import { languages, tokenize, withoutTokenizer } from '../core.js';\n\nvar expressionDef = /\\{[^\\n[\\]{}]*\\}/g;\n\nvar params = {\n\t'quoted-string': {\n\t\tpattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n\t\talias: 'operator'\n\t},\n\t'command-param-id': {\n\t\tpattern: /(\\s)\\w+:/,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n\t'command-param-value': [\n\t\t{\n\t\t\tpattern: expressionDef,\n\t\t\talias: 'selector',\n\t\t},\n\t\t{\n\t\t\tpattern: /([ \\t])\\S+/g,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'operator',\n\t\t},\n\t\t{\n\t\t\tpattern: /\\S(?:.*\\S)?/,\n\t\t\talias: 'operator',\n\t\t}\n\t]\n};\n\n/**\n * @param {string} input\n * @returns {boolean}\n */\nvar isBadLine = input => {\n\tfor (var brackets = '[]{}', stack = [], s = 0, i = 0, l = input.length; i < l; ) {\n\t\tvar bracketsIndex = brackets.indexOf(input[i++]);\n\t\tif (bracketsIndex + 1) {\n\t\t\tif (bracketsIndex % 2) {\n\t\t\t\tif (stack[--s] != bracketsIndex) return true;\n\t\t\t} else stack[s++] = bracketsIndex + 1;\n\t\t}\n\t}\n\treturn s;\n}\n\nlanguages.nani = languages.naniscript = {\n\t// ; ...\n\t'comment': {\n\t\tpattern: /^([ \\t]*);.*/m,\n\t\tlookbehind: true,\n\t},\n\t// > ...\n\t// Define is a control line starting with '>' followed by a word, a space and a text.\n\t'define': {\n\t\tpattern: /^>.+/m,\n\t\talias: 'tag',\n\t\tinside: {\n\t\t\t'value': {\n\t\t\t\tpattern: /(^>\\w+[ \\t]+)(?!\\s)[^{}\\n]+/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'operator'\n\t\t\t},\n\t\t\t'key': {\n\t\t\t\tpattern: /(^>)\\w+/,\n\t\t\t\tlookbehind: true,\n\t\t\t}\n\t\t}\n\t},\n\t// # ...\n\t'label': {\n\t\tpattern: /^([ \\t]*)#[ \\t]*\\w+[ \\t]*$/m,\n\t\tlookbehind: true,\n\t\talias: 'regex'\n\t},\n\t'command': {\n\t\tpattern: /^([ \\t]*)@\\w+(?=[ \\t]|$).*/m,\n\t\tlookbehind: true,\n\t\talias: 'function',\n\t\tinside: {\n\t\t\t'command-name': /^@\\w+/,\n\t\t\t'expression': {\n\t\t\t\tpattern: expressionDef,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'selector'\n\t\t\t},\n\t\t\t'command-params': {\n\t\t\t\tpattern: /\\s*\\S[\\s\\S]*/,\n\t\t\t\tinside: params\n\t\t\t},\n\t\t}\n\t},\n\t// Generic is any line that doesn't start with operators: ;>#@\n\t'generic-text': {\n\t\tpattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n\t\tlookbehind: true,\n\t\talias: 'punctuation',\n\t\tinside: {\n\t\t\t// \\{ ... \\} ... \\[ ... \\] ... \\\"\n\t\t\t'escaped-char': /\\\\[[\\]{}\"]/,\n\t\t\t'expression': {\n\t\t\t\tpattern: expressionDef,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'selector'\n\t\t\t},\n\t\t\t'inline-command': {\n\t\t\t\tpattern: /\\[[ \\t]*\\w[^\\n[\\]]*\\]/g,\n\t\t\t\tgreedy: true,\n\t\t\t\talias: 'function',\n\t\t\t\tinside: {\n\t\t\t\t\t'start-stop-char': /[[\\]]/,\n\t\t\t\t\t'command-params': {\n\t\t\t\t\t\tpattern: /(^[ \\t]*\\w+)[\\s\\S]+/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tinside: params\n\t\t\t\t\t},\n\t\t\t\t\t'command-param-name': {\n\t\t\t\t\t\tpattern: /\\w+/,\n\t\t\t\t\t\talias: 'name',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t[tokenize](code, grammar) {\n\t\tvar tokens = withoutTokenizer(code, grammar);\n\t\tvar position = 0;\n\t\tvar i = 0, l = tokens.length;\n\t\twhile (i < l) {\n\t\t\tvar token = tokens[i++];\n\t\t\tvar length = token.length;\n\t\t\tvar content;\n\n\t\t\tif (token.type == 'generic-text') {\n\t\t\t\tcontent = code.slice(position, position + length);\n\t\t\t\tif (isBadLine(content)) {\n\t\t\t\t\ttoken.type = 'bad-line';\n\t\t\t\t\ttoken.content = content;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tposition += length;\n\t\t}\n\t\treturn tokens;\n\t}\n};\n"],"names":[],"mappings":"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"}