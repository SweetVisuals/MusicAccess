{"version":3,"file":"haxe.js","sources":["../../../src/prism/languages/haxe.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { boolean, clikeComment, clikeNumber, clikePunctuation } from '../utils/patterns.js';\n\nlanguages.haxe = {\n\t'comment': clikeComment(),\n\t'string-interpolation': {\n\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/g,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{?|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\t'expression': {\n\t\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\t\tinside: 'haxe'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string': {\n\t\t// Strings can be multi-line\n\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/g,\n\t\tgreedy: true\n\t},\n\t'regex': {\n\t\tpattern: /~\\/(?:\\\\.|[^\\\\\\n/])+\\/[a-z]*/g,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-flags': /\\w+$/,\n\t\t\t'regex-delimiter': /^~\\/|\\/$/,\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: 'regex'\n\t\t\t},\n\t\t}\n\t},\n\t'class-name': [\n\t\t{\n\t\t\tpattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n\t\t\tlookbehind: true,\n\t\t},\n\t\t// based on naming convention\n\t\t/\\b[A-Z]\\w*/\n\t],\n\t'preprocessor': {\n\t\tpattern: /#(?:else|elseif|end|if)\\b.*/,\n\t\talias: 'property'\n\t},\n\t'metadata': {\n\t\tpattern: /@:?[\\w.]+/,\n\t\talias: 'symbol'\n\t},\n\t'reification': {\n\t\tpattern: /\\$(?:\\w+|(?=\\{))/,\n\t\talias: 'important'\n\t},\n\t// The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n\t'keyword': /\\bthis\\b|\\b(?:abstract|as|break|cas[et]|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n\t'boolean': boolean,\n\t'function': {\n\t\tpattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/gi,\n\t\tgreedy: true\n\t},\n\t'number': clikeNumber,\n\t'operator': /--|\\+\\+|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[%&|^!=/*+-])=?|[?:~]|\\.{3}/,\n\t'punctuation': clikePunctuation\n};\n"],"names":[],"mappings":";;AAGA,UAAU,OAAO;AAAA,EAChB,WAAW,aAAc;AAAA,EACzB,wBAAwB;AAAA,IACvB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,iBAAiB;AAAA,QAChB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,QAAQ;AAAA,UACP,6BAA6B;AAAA,YAC5B,SAAS;AAAA,YACT,OAAO;AAAA,UACP;AAAA,UACD,cAAc;AAAA,YACb,SAAS;AAAA,YACT,QAAQ;AAAA,UACR;AAAA,QACN;AAAA,MACI;AAAA,MACD,UAAU;AAAA,IACb;AAAA,EACE;AAAA,EACD,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,SAAS;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,eAAe;AAAA,MACf,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,QACf,SAAS;AAAA,QACT,OAAO;AAAA,QACP,QAAQ;AAAA,MACR;AAAA,IACJ;AAAA,EACE;AAAA,EACD,cAAc;AAAA,IACb;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA;AAAA,IAED;AAAA,EACA;AAAA,EACD,gBAAgB;AAAA,IACf,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,IACX,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,eAAe;AAAA,IACd,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA;AAAA,EAED,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,eAAe;AAChB;"}