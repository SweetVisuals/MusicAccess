{"version":3,"file":"factor.js","sources":["../../../src/prism/languages/factor.js"],"sourcesContent":["import { languages } from '../core.js';\n\nvar comment_inside = {\n\t'function': /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n};\nvar string_inside = {\n\t'number': /\\\\[^\\s']|%\\w/\n};\n\nvar combinatorsToken = {\n\tlookbehind: true,\n\talias: 'keyword'\n};\n\nvar factor = languages.factor = {\n\t'comment': {\n\t\t// ! single-line exclamation point comments with whitespace after/around the !\n\t\t// /* comment */, /* comment*/\n\t\t// ![[ comment ]] , ![===[ comment]===]\n\t\tpattern: /(^|\\s)(?:! .*|!$|\\/\\*\\s[\\s\\S]*?\\*\\/(?!\\S)|!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?!\\S))/g,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: comment_inside\n\t},\n\t'number': {\n\t\t\t// basic base 10 integers 9, -9\n\t\t\t// base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n\t\t\t// fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n\t\t\t// positive mixed numbers 23+1/5 +23+1/5\n\t\t\t// negative mixed numbers -23-1/5\n\t\t\t// basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n\t\t\t// and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n\t\t\t// NAN literal syntax NAN: 80000deadbeef, NAN: a\n\t\t\t/*\n\t\t\t\tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n\t\t\t\t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n\t\t\t\tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n\t\t\t\t<https://docs.factorcode.org/content/article-syntax-floats.html>\n\t\t\t*/\n\t\t\tpattern: /(^|\\s)(?:[+-]?\\d+|[+-]?0(?:[bB][01]+|[oO][0-7]+|d\\d+|x[a-fA-F\\d]+)|[+-]?\\d+\\/\\d+\\.?|\\+?\\d+\\+\\d+\\/\\d+|-\\d+-\\d+\\/\\d+|[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?|NAN:\\s+[a-fA-F\\d]+|[+-]?0(?:[bB]1\\.[01]*|[oO]1\\.[0-7]*|[dD]1\\.\\d*|[xX]1\\.[a-fA-F\\d]*)[pP]\\d+)(?!\\S)/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t// R/ regexp?\\/\\\\/\n\t'regexp': {\n\t\tpattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?!\\S)/,\n\t\tlookbehind: true,\n\t\talias: 'number',\n\t\tinside: {\n\t\t\t'variable': /\\\\\\S/,\n\t\t\t'keyword': /[+?*^$()[\\]{}.|]/,\n\t\t\t'operator': {\n\t\t\t\tpattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t}\n\t},\n\n\t'boolean': {\n\t\tpattern: /(^|\\s)[tf](?!\\S)/,\n\t\tlookbehind: true\n\t},\n\n\t// SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n\t'custom-string': {\n\t\tpattern: /(^|\\s)[A-Z\\d-]+\"\\s(?:\\\\\\S|[^\\\\\"])*\"/g,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'string',\n\t\tinside: {\n\t\t\t'number': /\\\\\\S|%\\w|\\//\n\t\t}\n\t},\n\n\t'multiline-string': [\n\t\t{\n\t\t\t// STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n\t\t\tpattern: /(^|\\s)STRING:\\s+\\S+\\n.*\\n\\s*;(?!\\S)/g,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'number': string_inside.number,\n\t\t\t\t// trailing semicolon on its own line\n\t\t\t\t'semicolon-or-setlocal': {\n\t\t\t\t\tpattern: /(\\n[ \\t]*);(?!\\S)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'function'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n\t\t\tpattern: /(^|\\s)HEREDOC:\\s+\\S+\\n.*\\n\\s*\\S+(?!\\S)/g,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: string_inside\n\t\t},\n\t\t{\n\t\t\t// [[ string ]], [==[ string]==]\n\t\t\tpattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?!\\S)/g,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: string_inside\n\t\t}\n\t],\n\n\t'special-using': {\n\t\tpattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?!\\S))/,\n\t\tlookbehind: true,\n\t\talias: 'function',\n\t\tinside: {\n\t\t\t// this is essentially a regex for vocab names, which i don't want to specify\n\t\t\t// but the USING: gets picked up as a vocab name\n\t\t\t'string': {\n\t\t\t\tpattern: /(\\s)[^:\\s]+/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t}\n\t},\n\n\t/* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n\t\ttrying to do better is more work and regex-computation-time than it's worth though.\n\t\t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n\t\t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n\t\t- we'd like if the following variable name conventions were recognised specifically:\n\t\t\tspecial row variables = ..a b..\n\t\t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n\t\t\tword throws unconditional error = *\n\t\t\tany other word-like variable name = a ? q' etc\n\n\t\thttps://docs.factorcode.org/content/article-effects.html\n\n\t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\n\t\tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n\t*/\n\n\t// current solution is not great\n\t'stack-effect-delimiter': [\n\t\t{\n\t\t\t// opening parenthesis\n\t\t\tpattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\t\t{\n\t\t\t// middle --\n\t\t\tpattern: /(\\s)--(?=\\s)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\t\t{\n\t\t\t// closing parenthesis\n\t\t\tpattern: /(\\s)\\)(?!\\S)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t}\n\t],\n\n\t'combinators': combinatorsToken,\n\n\t'kernel-builtin': {\n\t\tpattern: null,\n\t\tlookbehind: true,\n\t\talias: 'variable'\n\t},\n\n\t'sequences-builtin': {\n\t\tpattern: null,\n\t\tlookbehind: true,\n\t\talias: 'variable'\n\t},\n\n\t'math-builtin': {\n\t\tpattern: null,\n\t\tlookbehind: true,\n\t\talias: 'variable'\n\t},\n\n\t'constructor-word': {\n\t\t// <array> but not <=>\n\t\tpattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?!\\S)/,\n\t\tlookbehind: true,\n\t\talias: 'keyword'\n\t},\n\n\t'other-builtin-syntax': {\n\t\tpattern: null,\n\t\tlookbehind: true,\n\t\talias: 'operator'\n\t},\n\n\t/*\n\t\tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\n\t\t\tset-[x]\n\t\t\tchange-[x]\n\t\t\twith-[x]\n\t\t\tnew-[x]\n\t\t\t>[string]\n\t\t\t[base]>\n\t\t\t[string]>[number]\n\t\t\t+[symbol]+\n\t\t\t[boolean-word]?\n\t\t\t?[of]\n\t\t\t[slot-reader]>>\n\t\t\t>>[slot-setter]\n\t\t\t[slot-writer]<<\n\t\t\t([implementation-detail])\n\t\t\t[mutater]!\n\t\t\t[variant]*\n\t\t\t[prettyprint].\n\t\t\t$[help-markup]\n\n\t\t<constructors>, SYNTAX:, etc are supported by their own patterns.\n\n\t\t`with` and `new` from `kernel` are their own builtins.\n\n\t\tsee <https://docs.factorcode.org/content/article-conventions.html>\n\t*/\n\t'conventionally-named-word': {\n\t\tpattern: /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?!\\S)/,\n\t\tlookbehind: true,\n\t\talias: 'keyword'\n\t},\n\n\t'colon-syntax': {\n\t\tpattern: /(^|\\s)(?:[A-Z\\d-]+#?)?::?\\s+(?:;\\S+|(?!;)\\S+)(?!\\S)/g,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'function'\n\t},\n\n\t'semicolon-or-setlocal': {\n\t\tpattern: /(\\s)(?:;|:>)(?!\\S)/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\n\t// do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n\t'curly-brace-literal-delimiter': [\n\t\t{\n\t\t\t// opening\n\t\t\tpattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\t\t{\n\t\t\t// closing\n\t\t\tpattern: /(\\s)\\}(?!\\S)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\n\t],\n\n\t// do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n\t'quotation-delimiter': [\n\t\t{\n\t\t\t// opening\n\t\t\tpattern: /(^|\\s)\\[(?=\\s)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\t\t{\n\t\t\t// closing\n\t\t\tpattern: /(\\s)\\](?!\\S)/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'operator'\n\t\t},\n\t],\n\n\t'normal-word': {\n\t\tpattern: /(^|\\s)[^\"\\s]\\S*(?!\\S)/,\n\t\tlookbehind: true\n\t},\n\n\t/*\n\t\tbasic first-class string \"a\"\n\t\t\twith escaped double-quote \"a\\\"\"\n\t\t\tescaped backslash \"\\\\\"\n\t\t\tand general escapes since Factor has so many \"\\N\"\n\n\t\tsyntax that works in the reference implementation that isn't fully\n\t\tsupported because it's an implementation detail:\n\t\t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\n\t\t\t\"string\"5 -> string, 5\n\t\t\t\"string\"[ ] -> string, quotation\n\t\t\t{ \"a\"} -> array<string>\n\n\t\tthe rest of those examples all properly recognise the string, but not\n\t\t\tthe other object (number, quotation, etc)\n\t\tthis is fine for a regex-only implementation.\n\t*/\n\t'string': {\n\t\tpattern: /\"(?:\\\\\\S|[^\\\\\"])*\"/g,\n\t\tgreedy: true,\n\t\tinside: string_inside\n\t}\n};\n\n/** @param {string} str */\nvar escape = str => str.replace(/[$+?|.^*()[\\]{}\\\\]/g, '\\\\$&');\n\nvar arrToWordsRegExp = arr => RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?!\\\\S)');\n\nvar builtins = {\n\t'kernel-builtin': [\n\t\t'or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'\n\t],\n\t'other-builtin-syntax': [\n\t\t// syntax\n\t\t'=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable',\n\t\t// literals\n\t\t'$', '$[', '${'\n\t],\n\t'sequences-builtin': [\n\t\t'member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'\n\t],\n\t'math-builtin': [\n\t\t'number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'\n\t]\n\t// that's all for now\n};\n\nvar combinators = [\n\t// kernel\n\t'2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@',\n\t// sequences\n\t'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index',\n\t// math\n\t'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?',\n\t// math.combinators\n\t'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative',\n\t// combinators\n\t'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot',\n\t// combinators.short-circuit\n\t'2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&',\n\t// combinators.smart\n\t'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence',\n\t// tafn\n];\n\nfor (var k in builtins) {\n\tfactor[k].pattern = arrToWordsRegExp(builtins[k]);\n}\n\ncombinatorsToken.pattern = arrToWordsRegExp(combinators);\n"],"names":[],"mappings":";AAEA,IAAI,iBAAiB;AAAA,EACpB,YAAY;AACb;AACA,IAAI,gBAAgB;AAAA,EACnB,UAAU;AACX;AAEA,IAAI,mBAAmB;AAAA,EACtB,YAAY;AAAA,EACZ,OAAO;AACR;AAEA,IAAI,SAAS,UAAU,SAAS;AAAA,EAC/B,WAAW;AAAA;AAAA;AAAA;AAAA,IAIV,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,EACR;AAAA,EACD,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeR,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA;AAAA,EAGF,UAAU;AAAA,IACT,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ;AAAA,MACP,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,YAAY;AAAA,QACX,SAAS;AAAA,QACT,YAAY;AAAA,MAChB;AAAA,IACA;AAAA,EACE;AAAA,EAED,WAAW;AAAA,IACV,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA;AAAA,EAGD,iBAAiB;AAAA,IAChB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,MACP,UAAU;AAAA,IACb;AAAA,EACE;AAAA,EAED,oBAAoB;AAAA,IACnB;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,QACP,UAAU,cAAc;AAAA;AAAA,QAExB,yBAAyB;AAAA,UACxB,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,OAAO;AAAA,QACZ;AAAA,MACA;AAAA,IACG;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IACR;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IACX;AAAA,EACE;AAAA,EAED,iBAAiB;AAAA,IAChB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ;AAAA;AAAA;AAAA,MAGP,UAAU;AAAA,QACT,SAAS;AAAA,QACT,YAAY;AAAA,MAChB;AAAA,IACA;AAAA,EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBD,0BAA0B;AAAA,IACzB;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACV;AAAA,EACE;AAAA,EAED,eAAe;AAAA,EAEf,kBAAkB;AAAA,IACjB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,qBAAqB;AAAA,IACpB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,gBAAgB;AAAA,IACf,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,oBAAoB;AAAA;AAAA,IAEnB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,wBAAwB;AAAA,IACvB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BD,6BAA6B;AAAA,IAC5B,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,gBAAgB;AAAA,IACf,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA,EAED,yBAAyB;AAAA,IACxB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA;AAAA,EAGD,iCAAiC;AAAA,IAChC;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,EAED;AAAA;AAAA,EAGD,uBAAuB;AAAA,IACtB;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,EACD;AAAA,EAED,eAAe;AAAA,IACd,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBD,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AACA;AAGA,IAAI,SAAS,SAAO,IAAI,QAAQ,uBAAuB,MAAM;AAE7D,IAAI,mBAAmB,SAAO,OAAO,eAAe,IAAI,IAAI,MAAM,EAAE,KAAK,GAAG,IAAI,UAAU;AAE1F,IAAI,WAAW;AAAA,EACd,kBAAkB;AAAA,IACjB;AAAA,IAAM;AAAA,IAAS;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAW;AAAA,IAAO;AAAA,IAAY;AAAA,IAAmB;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAa;AAAA,IAAc;AAAA,IAAQ;AAAA,IAAY;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAS;AAAA,IAAY;AAAA,IAAQ;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAO;AAAA,IAAK;AAAA,IAAK;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAmB;AAAA,IAAO;AAAA,IAAU;AAAA,IAAO;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAS;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAW;AAAA,IAAW;AAAA,IAAQ;AAAA,IAAW;AAAA,IAAO;AAAA,IAAiB;AAAA,IAAY;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAS;AAAA,IAAW;AAAA,IAAa;AAAA,IAAQ;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAU;AAAA,IAAiB;AAAA,IAAU;AAAA,IAAS;AAAA,IAAa;AAAA,IAAY;AAAA,IAAqB;AAAA,IAAmB;AAAA,IAAQ;AAAA,IAAa;AAAA,IAAO;AAAA,IAAS;AAAA,IAAO;AAAA,IAAS;AAAA,IAAO;AAAA,IAAkB;AAAA,EAC9uB;AAAA,EACD,wBAAwB;AAAA;AAAA,IAEvB;AAAA,IAAW;AAAA,IAAa;AAAA,IAAa;AAAA,IAAM;AAAA,IAAU;AAAA,IAAO;AAAA,IAAK;AAAA,IAAY;AAAA,IAAM;AAAA,IAAU;AAAA,IAAS;AAAA,IAAU;AAAA,IAAa;AAAA,IAAc;AAAA,IAAY;AAAA,IAAU;AAAA,IAAW;AAAA,IAAiB;AAAA,IAAqB;AAAA,IAAa;AAAA,IAAW;AAAA,IAAoB;AAAA,IAAM;AAAA;AAAA,IAEpQ;AAAA,IAAK;AAAA,IAAM;AAAA,EACX;AAAA,EACD,qBAAqB;AAAA,IACpB;AAAA,IAAc;AAAA,IAAY;AAAA,IAAU;AAAA,IAAoB;AAAA,IAAU;AAAA,IAAc;AAAA,IAAc;AAAA,IAAa;AAAA,IAAoB;AAAA,IAAmB;AAAA,IAAY;AAAA,IAAc;AAAA,IAAQ;AAAA,IAAY;AAAA,IAAW;AAAA,IAAc;AAAA,IAAa;AAAA,IAAY;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAO;AAAA,IAAY;AAAA,IAAW;AAAA,IAAU;AAAA,IAAW;AAAA,IAAc;AAAA,IAAc;AAAA,IAAU;AAAA,IAAS;AAAA,IAAW;AAAA,IAAqB;AAAA,IAAc;AAAA,IAAe;AAAA,IAAQ;AAAA,IAAU;AAAA,IAAiB;AAAA,IAAqB;AAAA,IAAiC;AAAA,IAAkC;AAAA,IAAa;AAAA,IAAW;AAAA,IAAY;AAAA,IAAU;AAAA,IAAc;AAAA,IAAc;AAAA,IAAW;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAgB;AAAA,IAAgB;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAU;AAAA,IAAa;AAAA,IAAW;AAAA,IAAS;AAAA,IAAY;AAAA,IAAe;AAAA,IAAY;AAAA,IAAS;AAAA,IAAa;AAAA,IAAc;AAAA,IAAc;AAAA,IAAsB;AAAA,IAAU;AAAA,IAAU;AAAA,IAAY;AAAA,IAAgB;AAAA,IAAW;AAAA,IAAc;AAAA,IAAQ;AAAA,IAAW;AAAA,IAAS;AAAA,IAAU;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAc;AAAA,IAAY;AAAA,IAAa;AAAA,IAAO;AAAA,IAAc;AAAA,IAAW;AAAA,IAAc;AAAA,IAAU;AAAA,IAAe;AAAA,IAAa;AAAA,IAAQ;AAAA,IAAa;AAAA,IAAU;AAAA,IAAa;AAAA,IAAkB;AAAA,IAAW;AAAA,IAAgB;AAAA,IAAW;AAAA,IAAiB;AAAA,IAAgB;AAAA,IAAa;AAAA,IAAoB;AAAA,IAAW;AAAA,IAAU;AAAA,IAAY;AAAA,IAAQ;AAAA,IAAc;AAAA,IAAqB;AAAA,IAAa;AAAA,IAAW;AAAA,IAAW;AAAA,IAAa;AAAA,IAAY;AAAA,IAAY;AAAA,IAAc;AAAA,IAAQ;AAAA,IAAe;AAAA,IAAkB;AAAA,IAAS;AAAA,IAAW;AAAA,IAAa;AAAA,IAAiB;AAAA,IAAe;AAAA,IAAqB;AAAA,IAAO;AAAA,IAAW;AAAA,IAAQ;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAuB;AAAA,IAAc;AAAA,IAAc;AAAA,IAAoB;AAAA,IAAW;AAAA,IAAe;AAAA,IAAU;AAAA,IAAc;AAAA,IAAY;AAAA,IAAmB;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAa;AAAA,IAAU;AAAA,IAAgB;AAAA,IAAgB;AAAA,IAAY;AAAA,IAAY;AAAA,IAAO;AAAA,IAAc;AAAA,IAAa;AAAA,IAAY;AAAA,IAAS;AAAA,IAAqB;AAAA,IAAgB;AAAA,IAAQ;AAAA,IAAe;AAAA,IAAS;AAAA,IAAW;AAAA,IAAW;AAAA,IAAQ;AAAA,IAAe;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAiB;AAAA,IAAa;AAAA,EACxiE;AAAA,EACD,gBAAgB;AAAA,IACf;AAAA,IAAW;AAAA,IAAmB;AAAA,IAAO;AAAA,IAAe;AAAA,IAAkB;AAAA,IAAc;AAAA,IAAW;AAAA,IAAgB;AAAA,IAAW;AAAA,IAAY;AAAA,IAAe;AAAA,IAAO;AAAA,IAAK;AAAA,IAAK;AAAA,IAAe;AAAA,IAAK;AAAA,IAAO;AAAA,IAAK;AAAA,IAAM;AAAA,IAAU;AAAA,IAAe;AAAA,IAAyB;AAAA,IAAQ;AAAA,IAAK;AAAA,IAAQ;AAAA,IAAK;AAAA,IAAY;AAAA,IAAU;AAAA,IAAe;AAAA,IAAM;AAAA,IAAS;AAAA,IAAc;AAAA,IAAU;AAAA,IAAS;AAAA,IAAU;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAW;AAAA,IAAU;AAAA,IAAW;AAAA,IAAY;AAAA,IAAM;AAAA,IAAkB;AAAA,IAAM;AAAA,IAAO;AAAA,IAAW;AAAA,IAAc;AAAA,IAAM;AAAA,IAAM;AAAA,IAAO;AAAA,IAAS;AAAA,IAAY;AAAA,IAAU;AAAA,IAAM;AAAA,IAAW;AAAA,IAAW;AAAA,IAAO;AAAA,IAAU;AAAA,IAAM;AAAA,IAAU;AAAA,IAAS;AAAA,IAAQ;AAAA,IAAY;AAAA,IAAc;AAAA,IAAW;AAAA,IAAY;AAAA,IAAQ;AAAA,IAAa;AAAA,IAAe;AAAA,IAAS;AAAA,IAAO;AAAA,IAAkB;AAAA,IAAa;AAAA,IAA0B;AAAA,IAAc;AAAA,IAAS;AAAA,IAAc;AAAA,IAAS;AAAA,IAAW;AAAA,IAAO;AAAA,IAAU;AAAA,IAAyB;AAAA,IAAO;AAAA,IAAQ;AAAA,IAAM;AAAA,IAAQ;AAAA,IAAY;AAAA,IAAS;AAAA,IAAa;AAAA,EAC97B;AAAA;AAEA;AAEA,IAAI,cAAc;AAAA;AAAA,EAEjB;AAAA,EAAO;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAW;AAAA,EAAO;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAS;AAAA,EAAW;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAS;AAAA,EAAO;AAAA,EAAU;AAAA,EAAM;AAAA,EAAW;AAAA,EAAa;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAa;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAW;AAAA,EAAM;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAc;AAAA,EAAc;AAAA,EAAY;AAAA,EAAS;AAAA,EAAW;AAAA,EAAQ;AAAA,EAAM;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAO;AAAA,EAAY;AAAA;AAAA,EAEzf;AAAA,EAAkB;AAAA,EAAmB;AAAA,EAAU;AAAA,EAAa;AAAA,EAAS;AAAA,EAAa;AAAA,EAAa;AAAA,EAAY;AAAA,EAAe;AAAA,EAAW;AAAA,EAAa;AAAA,EAAiB;AAAA,EAAoB;AAAA,EAAU;AAAA,EAAO;AAAA,EAAW;AAAA,EAAe;AAAA,EAAc;AAAA,EAAU;AAAA,EAAe;AAAA,EAAQ;AAAA,EAAgB;AAAA,EAAa;AAAA,EAAW;AAAA,EAAgB;AAAA,EAAgB;AAAA,EAAc;AAAA,EAAmB;AAAA,EAAS;AAAA,EAAc;AAAA,EAAU;AAAA,EAAgB;AAAA,EAAa;AAAA,EAAgB;AAAA,EAAY;AAAA,EAAU;AAAA,EAAY;AAAA,EAAc;AAAA,EAAQ;AAAA,EAAa;AAAA,EAAiB;AAAA,EAAgB;AAAA,EAAQ;AAAA,EAAW;AAAA,EAAW;AAAA,EAAa;AAAA,EAAiB;AAAA,EAAkB;AAAA,EAAmB;AAAA,EAAiB;AAAA,EAAW;AAAA,EAAQ;AAAA,EAAa;AAAA,EAAe;AAAA,EAAW;AAAA,EAAe;AAAA,EAAc;AAAA,EAAQ;AAAA,EAAc;AAAA,EAAkB;AAAA,EAAc;AAAA,EAAQ;AAAA,EAAgB;AAAA,EAAe;AAAA,EAAY;AAAA,EAAiB;AAAA,EAAa;AAAA,EAAW;AAAA,EAAS;AAAA,EAAc;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAc;AAAA,EAAW;AAAA,EAAc;AAAA,EAAc;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAa;AAAA,EAAkB;AAAA;AAAA,EAEthC;AAAA,EAAW;AAAA,EAAgB;AAAA,EAAe;AAAA,EAAkB;AAAA,EAAa;AAAA,EAAqB;AAAA,EAAmB;AAAA,EAAS;AAAA,EAAkB;AAAA,EAAgB;AAAA;AAAA,EAE5J;AAAA,EAAmB;AAAA,EAAe;AAAA,EAAiB;AAAA,EAAiB;AAAA,EAAmB;AAAA;AAAA,EAEvF;AAAA,EAAQ;AAAA,EAAW;AAAA,EAAa;AAAA,EAAa;AAAA,EAAW;AAAA,EAAgB;AAAA,EAAkB;AAAA,EAAc;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAe;AAAA,EAAsB;AAAA,EAAU;AAAA;AAAA,EAEzK;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA;AAAA,EAE/D;AAAA,EAAiB;AAAA,EAAe;AAAA,EAAkB;AAAA,EAAe;AAAA,EAAgB;AAAA,EAAc;AAAA,EAAe;AAAA,EAAY;AAAA,EAAkB;AAAA,EAAqB;AAAA,EAAe;AAAA,EAAsB;AAAA,EAAY;AAAA,EAAgB;AAAA,EAAoB;AAAA,EAAqB;AAAA,EAAkB;AAAA,EAAW;AAAA,EAAkB;AAAA,EAAkB;AAAA,EAAe;AAAA,EAAU;AAAA,EAAiB;AAAA,EAAgB;AAAA,EAAgB;AAAA,EAAc;AAAA,EAAc;AAAA,EAAW;AAAA,EAAqB;AAAA,EAAgB;AAAA,EAAa;AAAA,EAAe;AAAA,EAAyB;AAAA;AAExhB;AAEA,SAAS,KAAK,UAAU;AACvB,SAAO,CAAC,EAAE,UAAU,iBAAiB,SAAS,CAAC,CAAC;AACjD;AAEA,iBAAiB,UAAU,iBAAiB,WAAW;"}