{"version":3,"file":"cshtml.js","sources":["../../../src/prism/languages/cshtml.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { clone, insertBefore } from '../utils/language.js';\nimport { nested, replace } from '../utils/shared.js';\nimport './markup.js';\nimport './csharp.js';\n\nvar commentLike = /\\/(?![/*])|\\/\\/.*\\n|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//.source;\nvar stringLike = `@(?!\")|\"(?:[^\\\\\\\\\\n\"]|\\\\\\\\.)*\"|@\"(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\\"]|\"\")*\"(?!\")|'(?:(?:[^\\\\\\\\\\n']|\\\\\\\\.|\\\\\\\\[Uux][\\a-fA-F\\d]{1,8})'|(?=[^\\\\\\\\](?!')))`;\n\nvar round = nested(replace(/\\((?:[^()\"'@/]|<0>|<1>|<self>)*\\)/.source, [stringLike, commentLike]), 2);\nvar square = nested(replace(/\\[(?:[^[\\]\"'@/]|<0>|<1>|<self>)*\\]/.source, [stringLike, commentLike]), 1);\nvar curly = nested(replace(/\\{(?:[^{}\"'@/]|<0>|<1>|<self>)*\\}/.source, [stringLike, commentLike]), 2);\nvar angle = nested(replace(/<(?:[^<>\"'@/]|<0>|<self>)*>/.source, [commentLike]), 1);\n\nvar inlineCs = `@(?:await\\\\b\\\\s*)?(?:(?!await\\\\b)\\\\w+\\\\b|${round})(?:[?!]?\\\\.\\\\w+\\\\b|(?:${angle})?${round}|${square})*(?![?!\\\\.(\\\\[]|<(?!\\\\/))`;\n\n// Note about the above bracket patterns:\n// They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n// comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n// messes up the bracket and string counting implemented by the above patterns.\n//\n// This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n// and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n// complexity of an HTML expression.\n//\n// To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n// allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n\nvar tagAttrInlineCs = \"@(?![()\\\\w])|\" + inlineCs;\nvar tagAttrValue = `(?:\"[^\"@]*\"|'[^'@]*'|[^\\\\s\"'@=>]+(?=[\\\\s>])|[\"'][^\"'@]*(?:(?:${tagAttrInlineCs})[^\"\\'@]*)+[\"\\'])`;\n\nvar tagAttrs = `(?:\\\\s(?:\\\\s*[^\\\\s/=>]+(?:\\\\s*=\\\\s*${tagAttrValue}|(?=[\\\\s/>])))+)?`;\nvar tagContent = `(?!\\\\d)[^\\\\s/=>$<%]+${tagAttrs}\\\\s*\\\\/?>`;\nvar tagRegion = `\\\\B@?(?:<([a-zA-Z][\\\\w:]*)${tagAttrs}\\\\s*>(?:[^<]|<\\\\/?(?!\\\\1\\\\b)${tagContent}|${nested(\n\t`<\\\\1${tagAttrs}\\\\s*>(?:[^<]|<\\\\/?(?!\\\\1\\\\b)${tagContent}|<self>)*<\\\\/\\\\1\\\\s*>`, 2\n)})*<\\\\/\\\\1\\\\s*>|<${tagContent})`\n\n// Now for the actual language definition(s):\n//\n// Razor as a language has 2 parts:\n//  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n//  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n//\n// In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n// other. However, only CSHTML will be exported via `languages`.\n\nvar cshtml = languages.razor = languages.cshtml = clone(languages.html);\n\nvar csharpWithHtml = clone(languages.cs);\n\nvar cs = {\n\tpattern: /\\S[\\s\\S]*/,\n\talias: 'language-csharp',\n\tinside: csharpWithHtml\n};\n\nvar inlineValue = {\n\tpattern: RegExp(/(^|[^@])/.source + inlineCs, 'g'),\n\tlookbehind: true,\n\tgreedy: true,\n\talias: 'variable',\n\tinside: {\n\t\t'keyword': /^@/,\n\t\t'csharp': cs\n\t}\n};\n\nvar attrValue = cshtml.tag.inside['attr-value'][2];\n\ncshtml.tag.pattern = RegExp(/<\\/?/.source + tagContent, 'g');\nattrValue.pattern = RegExp(/(=\\s*)/.source + tagAttrValue, 'g');\n\ninsertBefore(csharpWithHtml, 'string', {\n\t'html': {\n\t\tpattern: RegExp(tagRegion, 'g'),\n\t\tgreedy: true,\n\t\tinside: cshtml\n\t}\n});\n\ninsertBefore(attrValue.inside, 'punctuation', { 'value': inlineValue });\n\ninsertBefore(cshtml, 'prolog', {\n\t'razor-comment': {\n\t\tpattern: /@\\*[\\s\\S]*?\\*@/g,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\n\t'block': {\n\t\tpattern: RegExp(\n\t\t\t`(^|[^@])@(?:${curly}|(?:code|functions)\\\\s*${curly}|(?:for|foreach|lock|switch|using|while)\\\\s*${\n\t\t\t\tround\n\t\t\t}\\\\s*${curly}|do\\\\s*${curly}\\\\s*while\\\\s*${round}(?:\\\\s*;)?|try\\\\s*${curly}\\\\s*catch\\\\s*${round}\\\\s*${curly}\\\\s*finally\\\\s*${\n\t\t\t\tcurly\n\t\t\t}|if\\\\s*${round}\\\\s*${curly}(?:\\\\s*else(?:\\\\s+if\\\\s*${round})?\\\\s*${curly})*|helper\\\\s+\\\\w+\\\\s*${round}\\\\s*${curly})`, 'g'\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'keyword': /^@\\w*/,\n\t\t\t'csharp': cs\n\t\t}\n\t},\n\n\t'directive': {\n\t\tpattern: /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/mg,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'keyword': /^@\\w+/,\n\t\t\t'csharp': cs\n\t\t}\n\t},\n\n\t'value': inlineValue,\n\n\t'delegate-operator': {\n\t\tpattern: /(^|[^@])@(?=<)/,\n\t\tlookbehind: true,\n\t\talias: 'operator'\n\t}\n});\n"],"names":[],"mappings":";;;;;AAMA,IAAI,cAAc;AAClB,IAAI,aAAa;AAAA;AAAA;AAEjB,IAAI,QAAQ,OAAO,QAAQ,uCAA4C,CAAC,YAAY,WAAW,CAAC,GAAG,CAAC;AACpG,IAAI,SAAS,OAAO,QAAQ,yCAA6C,CAAC,YAAY,WAAW,CAAC,GAAG,CAAC;AACtG,IAAI,QAAQ,OAAO,QAAQ,uCAA4C,CAAC,YAAY,WAAW,CAAC,GAAG,CAAC;AACpG,IAAI,QAAQ,OAAO,QAAQ,+BAAsC,CAAC,WAAW,CAAC,GAAG,CAAC;AAElF,IAAI,WAAW,4CAA4C,KAAK,0BAA0B,KAAK,KAAK,KAAK,IAAI,MAAM;AAcnH,IAAI,kBAAkB,kBAAkB;AACxC,IAAI,eAAe,gEAAgE,eAAe;AAElG,IAAI,WAAW,sCAAsC,YAAY;AACjE,IAAI,aAAa,uBAAuB,QAAQ;AAChD,IAAI,YAAY,6BAA6B,QAAQ,+BAA+B,UAAU,IAAI;AAAA,EACjG,OAAO,QAAQ,+BAA+B,UAAU;AAAA,EAAyB;AAClF,CAAC,mBAAmB,UAAU;AAW9B,IAAI,SAAS,UAAU,QAAQ,UAAU,SAAS,MAAM,UAAU,IAAI;AAEtE,IAAI,iBAAiB,MAAM,UAAU,EAAE;AAEvC,IAAI,KAAK;AAAA,EACR,SAAS;AAAA,EACT,OAAO;AAAA,EACP,QAAQ;AACT;AAEA,IAAI,cAAc;AAAA,EACjB,SAAS,OAAO,aAAoB,UAAU,GAAG;AAAA,EACjD,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,IACP,WAAW;AAAA,IACX,UAAU;AAAA,EACZ;AACA;AAEA,IAAI,YAAY,OAAO,IAAI,OAAO,YAAY,EAAE,CAAC;AAEjD,OAAO,IAAI,UAAU,OAAO,QAAgB,YAAY,GAAG;AAC3D,UAAU,UAAU,OAAO,YAAkB,cAAc,GAAG;AAE9D,aAAa,gBAAgB,UAAU;AAAA,EACtC,QAAQ;AAAA,IACP,SAAS,OAAO,WAAW,GAAG;AAAA,IAC9B,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AACA,CAAC;AAED,aAAa,UAAU,QAAQ,eAAe,EAAE,SAAS,YAAW,CAAE;AAEtE,aAAa,QAAQ,UAAU;AAAA,EAC9B,iBAAiB;AAAA,IAChB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA,EAED,SAAS;AAAA,IACR,SAAS;AAAA,MACR,eAAe,KAAK,0BAA0B,KAAK,+CAClD,KACA,OAAM,KAAK,UAAU,KAAK,gBAAgB,KAAK,qBAAqB,KAAK,gBAAgB,KAAK,OAAO,KAAK,kBAC1G,KACA,UAAS,KAAK,OAAO,KAAK,2BAA2B,KAAK,SAAS,KAAK,wBAAwB,KAAK,OAAO,KAAK;AAAA,MAAK;AAAA,IACvH;AAAA,IACD,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,WAAW;AAAA,MACX,UAAU;AAAA,IACb;AAAA,EACE;AAAA,EAED,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,WAAW;AAAA,MACX,UAAU;AAAA,IACb;AAAA,EACE;AAAA,EAED,SAAS;AAAA,EAET,qBAAqB;AAAA,IACpB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACT;AACA,CAAC;"}