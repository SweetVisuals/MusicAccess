{"version":3,"file":"elixir.js","sources":["../../../src/prism/languages/elixir.js"],"sourcesContent":["import { languages, rest } from '../core.js';\n\nvar interpolationInside = {\n\t'delimiter': {\n\t\tpattern: /^#\\{|\\}$/,\n\t\talias: 'punctuation'\n\t}\n};\n\ninterpolationInside[rest] = languages.elixir = {\n\t'doc': {\n\t\tpattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\[\\s\\S]|(?!\\2)[^\\\\\\n])*\\2)/,\n\t\tinside: {\n\t\t\t'attribute': /^@\\w+/,\n\t\t\t'string': /[\"'][\\s\\S]+/\n\t\t}\n\t},\n\t'comment': {\n\t\tpattern: /#.*/g,\n\t\tgreedy: true\n\t},\n\t// ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n\t'regex': {\n\t\tpattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\n])+\\2|\\((?:\\\\.|[^\\\\)\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\n])+\\}|<(?:\\\\.|[^\\\\>\\n])+>)[uismxfr]*/g,\n\t\tgreedy: true\n\t},\n\t'string': {\n\t\t// ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n\t\tpattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\n])+\\2|\\((?:\\\\.|[^\\\\)\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\n])+\\}|<(?:\\\\.|[^\\\\>\\n])+>)[csa]?|(\"\"\"|''')[\\s\\S]*?\\3|([\"'])(?:\\\\[\\s\\S]|(?!\\4)[^\\\\\\n])*\\4/g,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /#\\{[^}]+\\}/,\n\t\t\t\tinside: interpolationInside\n\t\t\t}\n\t\t}\n\t},\n\t'atom': {\n\t\t// Look-behind prevents bad highlighting of the :: operator\n\t\tpattern: /(^|[^:]):\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'symbol'\n\t},\n\t'module': {\n\t\tpattern: /\\b[A-Z]\\w*\\b/,\n\t\talias: 'class-name'\n\t},\n\t// Look-ahead prevents bad highlighting of the :: operator\n\t'attr-name': /\\b\\w+\\??:(?!:)/,\n\t'argument': {\n\t\t// Look-behind prevents bad highlighting of the && operator\n\t\tpattern: /(^|[^&])&\\d+/,\n\t\tlookbehind: true,\n\t\talias: 'variable'\n\t},\n\t'attribute': {\n\t\tpattern: /@\\w+/,\n\t\talias: 'variable'\n\t},\n\t'function': /\\b(?!\\d)\\w+[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n\t'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n\t'keyword': /\\b(?:after|alias|[ae]nd|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n?p?|protocol|struct)|do|else|fn|f?or|if|import|not|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n\t'boolean': /\\b(?:false|true|nil)\\b/,\n\t'operator': [\n\t\t/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.{2,3}|\\+\\+?|-[->]?|<[=>-]|>=|!==?|\\B!|=(?:==?|[>~])?|[*/^]/,\n\t\t{\n\t\t\t// We don't want to match <<\n\t\t\tpattern: /([^<])<(?!<)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// We don't want to match >>\n\t\t\tpattern: /([^>])>(?!>)/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'punctuation': /<<|>>|[()[\\]{}.,%]/\n};\n"],"names":[],"mappings":";AAEA,IAAI,sBAAsB;AAAA,EACzB,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AACA;AAEA,oBAAoB,IAAI,IAAI,UAAU,SAAS;AAAA,EAC9C,OAAO;AAAA,IACN,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,aAAa;AAAA,MACb,UAAU;AAAA,IACb;AAAA,EACE;AAAA,EACD,WAAW;AAAA,IACV,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA;AAAA,EAED,SAAS;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,iBAAiB;AAAA,QAChB,SAAS;AAAA,QACT,QAAQ;AAAA,MACZ;AAAA,IACA;AAAA,EACE;AAAA,EACD,QAAQ;AAAA;AAAA,IAEP,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,UAAU;AAAA,IACT,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA;AAAA,EAED,aAAa;AAAA,EACb,YAAY;AAAA;AAAA,IAEX,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,IACX;AAAA,IACA;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,IACf;AAAA,EACE;AAAA,EACD,eAAe;AAChB;"}