{"version":3,"file":"csharp.js","sources":["../../../src/prism/languages/csharp.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { extend, insertBefore } from '../utils/language.js';\nimport { nested, re, replace } from '../utils/shared.js';\nimport './clike.js';\n\nvar keywordsToPattern = words => `\\\\b(?:${words})\\\\b`;\n\n// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\nvar typeKeyword = 'bool|char|decimal|double|dynamic|float|object|s?byte|string|u?int|u?long|u?short|var|void'\nvar typeDeclarationKeyword = 'class|enum|interface|record|struct'\nvar contextualKeyword = 'add|alias|and|ascending|async|await|by|descending|from(?!\\\\s*[^\\\\s\\\\w])|[gls]et|global|group|into|init(?=\\\\s*;)|join|nameof|not|notnull|on|or|orderby|partial|remove|select|unmanaged|value|when|where|with(?=\\\\s*{)'\nvar otherKeyword = 'abstract|as|[bc]ase|break|catch|checked|const|continue|default|delegate|do|else|event|explicit|extern|finally|fixed|for|foreach|goto|i[fns]|implicit|internal|lock|namespace|new|null|operator|out|override|params|private|protected|public|readonly|ref|return|sealed|sizeof|stackalloc|static|switch|this|throw|try|typeof|unchecked|unsafe|using|virtual|volatile|while|yield'\n\n// keywords\nvar typeDeclarationKeywords = keywordsToPattern(typeDeclarationKeyword);\nvar keywords = RegExp(keywordsToPattern(typeKeyword + '|' + typeDeclarationKeyword + '|' + contextualKeyword + '|' + otherKeyword));\nvar nonTypeKeywords = keywordsToPattern(typeDeclarationKeyword + '|' + contextualKeyword + '|' + otherKeyword);\nvar nonContextualKeywords = keywordsToPattern(typeKeyword + '|' + typeDeclarationKeyword + '|' + otherKeyword);\n\n// types\nvar generic = nested(/<(?:[^<>;=*/%&|^+-]|<self>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\nvar nestedRound = nested(/\\((?:[^()]|<self>)*\\)/.source, 2);\nvar name = /@?\\b(?!\\d)\\w+\\b/.source;\nvar genericName = replace(/<0>(?:\\s*<1>)?/.source, [name, generic]);\nvar identifier = replace(/(?!<0>)<1>(?:\\s*\\.\\s*<1>)*/.source, [nonTypeKeywords, genericName]);\nvar array = /\\[\\s*(?:,\\s*)*\\]/.source;\nvar typeExpressionWithoutTuple = replace(/<0>(?:\\s*(?:\\?\\s*)?<1>)*(?:\\s*\\?)?/.source, [identifier, array]);\nvar tupleElement = replace(/[^()[\\],;%&|^=<>/*+-]|<0>|<1>|<2>/.source, [generic, nestedRound, array]);\nvar tuple = replace(/\\(<0>+(?:,<0>+)+\\)/.source, [tupleElement]);\nvar typeExpression = replace(/(?:<0>|<1>)(?:\\s*(?:\\?\\s*)?<2>)*(?:\\s*\\?)?/.source, [tuple, identifier, array]);\n\nvar typeInside = {\n\t'keyword': keywords,\n\t'punctuation': /[()[\\].,:<>?]/\n};\n\n// strings & characters\n// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\nvar character = /'(?:\\\\.|[^\\n'\\\\]|\\\\[Uux][a-fA-F\\d]{1,8})'/.source; // simplified pattern\nvar regularString = /\"(?:\\\\.|[^\\\\\\n\"])*\"/.source;\nvar verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n\nvar cs = languages.dotnet = languages.cs = languages.csharp = extend('clike', {\n\t'string': [\n\t\t{\n\t\t\tpattern: re(/(^|[^$\\\\])<0>/.source, [verbatimString], 'g'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: re(/(^|[^@$\\\\])<0>/.source, [regularString], 'g'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'class-name': [\n\t\t{\n\t\t\t// Using static\n\t\t\t// using static System.Math;\n\t\t\tpattern: re(/(\\busing\\s+static\\s+)<0>(?=\\s*;)/.source, [identifier]),\n\t\t\tlookbehind: true,\n\t\t\tinside: typeInside\n\t\t},\n\t\t{\n\t\t\t// Using alias (type)\n\t\t\t// using Project = PC.MyCompany.Project;\n\t\t\tpattern: re(/(\\busing\\s+<0>\\s*=\\s*)<1>(?=\\s*;)/.source, [name, typeExpression]),\n\t\t\tlookbehind: true,\n\t\t\tinside: typeInside\n\t\t},\n\t\t{\n\t\t\t// Using alias (alias)\n\t\t\t// using Project = PC.MyCompany.Project;\n\t\t\tpattern: re(/(\\busing\\s+)<0>(?=\\s*=)/.source, [name]),\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// Type declarations\n\t\t\t// class Foo<A, B>\n\t\t\t// interface Foo<out A, B>\n\t\t\tpattern: re(/(\\b<0>\\s+)<1>/.source, [typeDeclarationKeywords, genericName]),\n\t\t\tlookbehind: true,\n\t\t\tinside: typeInside\n\t\t},\n\t\t{\n\t\t\t// Single catch exception declaration\n\t\t\t// catch(Foo)\n\t\t\t// (things like catch(Foo e) is covered by variable declaration)\n\t\t\tpattern: re(/(\\bcatch\\s*\\(\\s*)<0>/.source, [identifier]),\n\t\t\tlookbehind: true,\n\t\t\tinside: typeInside\n\t\t},\n\t\t{\n\t\t\t// Name of the type parameter of generic constraints\n\t\t\t// where Foo : class\n\t\t\tpattern: re(/(\\bwhere\\s+)<0>/.source, [name]),\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\t// Casts and checks via as and is.\n\t\t\t// as Foo<A>, is Bar<B>\n\t\t\t// (things like if(a is Foo b) is covered by variable declaration)\n\t\t\tpattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<0>/.source, [typeExpressionWithoutTuple]),\n\t\t\tlookbehind: true,\n\t\t\tinside: typeInside\n\t\t},\n\t\t{\n\t\t\t// Variable, field and parameter declaration\n\t\t\t// (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n\t\t\tpattern: re(/\\b<0>(?=\\s+(?!<1>|with\\s*\\{)<2>(?:\\s*[=,:;{)\\]]|\\s+(?:in|when)\\b))/.source, [typeExpression, nonContextualKeywords, name]),\n\t\t\tinside: typeInside\n\t\t}\n\t],\n\t'keyword': keywords,\n\t// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n\t'number': /(?:\\b0(?:x[a-f\\d_]*[a-f\\d]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[+-]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n\t'operator': /[=-]>|([&|+-])\\1|~|\\?\\?=?|>>=?|<<=?|[%&|^!=<>/*+-]=?/,\n\t'punctuation': /\\?\\.?|::|[()[\\]{}.,:;]/\n});\n\ninsertBefore(cs, 'number', {\n\t'range': {\n\t\tpattern: /\\.\\./,\n\t\talias: 'operator'\n\t}\n});\n\ninsertBefore(cs, 'punctuation', {\n\t'named-parameter': {\n\t\tpattern: re(/([(,]\\s*)<0>(?=\\s*:)/.source, [name]),\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t}\n});\n\ninsertBefore(cs, 'class-name', {\n\t'namespace': {\n\t\t// namespace Foo.Bar {}\n\t\t// using Foo.Bar;\n\t\tpattern: re(/(\\b(?:namespace|using)\\s+)<0>(?:\\s*\\.\\s*<0>)*(?=\\s*[;{])/.source, [name]),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /\\./\n\t\t}\n\t},\n\t'type-expression': {\n\t\t// default(Foo), typeof(Foo<Bar>), sizeof(int)\n\t\tpattern: re(/(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<0>)+(?=\\s*\\))/.source, [nestedRound]),\n\t\tlookbehind: true,\n\t\talias: 'class-name',\n\t\tinside: typeInside\n\t},\n\t'return-type': {\n\t\t// Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n\t\t// int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n\t\t// int Foo => 0; int Foo { get; set } = 0;\n\t\tpattern: re(/<0>(?=\\s+(?:<1>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [typeExpression, identifier]),\n\t\talias: 'class-name',\n\t\tinside: typeInside\n\t},\n\t'constructor-invocation': {\n\t\t// new List<Foo<Bar[]>> { }\n\t\tpattern: re(/(\\bnew\\s+)<0>(?=\\s*[[({])/.source, [typeExpression]),\n\t\tlookbehind: true,\n\t\talias: 'class-name',\n\t\tinside: typeInside\n\t},\n\t/*'explicit-implementation': {\n\t\t// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\n\t\tpattern: replace(/\\b<0>(?=\\.<1>)/, className, methodOrPropertyDeclaration),\n\t\tinside: classNameInside,\n\t\talias: 'class-name'\n\t},*/\n\t'generic-method': {\n\t\t// foo<Bar>()\n\t\tpattern: re(/<0>\\s*<1>(?=\\s*\\()/.source, [name, generic]),\n\t\tinside: {\n\t\t\t'function': re(/^<0>/.source, [name]),\n\t\t\t'generic': {\n\t\t\t\tpattern: RegExp(generic),\n\t\t\t\talias: 'class-name',\n\t\t\t\tinside: typeInside\n\t\t\t}\n\t\t}\n\t},\n\t'type-list': {\n\t\t// The list of types inherited or of generic constraints\n\t\t// class Foo<F> : Bar, IList<FooBar>\n\t\t// where F : Bar, IList<int>\n\t\tpattern: re(\n\t\t\t/\\b((?:<0>\\s+<1>|record\\s+<1>\\s*<5>|where\\s+<2>)\\s*:\\s*)(?:<3>|<4>|<1>\\s*<5>|<6>)(?:\\s*,\\s*(?:<3>|<4>|<6>))*(?=\\s*(?:where|[{;]|=>|$))/.source,\n\t\t\t[typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\\bnew\\s*\\(\\s*\\)/.source]\n\t\t),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'record-arguments': {\n\t\t\t\tpattern: re(/(^(?!new\\s*\\()<0>\\s*)<1>/.source, [genericName, nestedRound], 'g'),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: cs\n\t\t\t},\n\t\t\t'keyword': keywords,\n\t\t\t'class-name': {\n\t\t\t\tpattern: RegExp(typeExpression, 'g'),\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: typeInside\n\t\t\t},\n\t\t\t'punctuation': /[(),]/\n\t\t}\n\t},\n\t'preprocessor': {\n\t\tpattern: /(^[ \\t]*)#.*/m,\n\t\tlookbehind: true,\n\t\talias: 'property',\n\t\tinside: {\n\t\t\t// highlight preprocessor directives as keywords\n\t\t\t'directive': {\n\t\t\t\tpattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'keyword'\n\t\t\t}\n\t\t}\n\t}\n});\n\n// attributes\nvar regularStringOrCharacter = regularString + '|' + character;\nvar regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\n]*\\n|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<0>/.source, [regularStringOrCharacter]);\nvar roundExpression = nested(replace(/[^()\"'/]|<0>|\\(<self>*\\)/.source, [regularStringCharacterOrComment]), 2);\n\n// https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\nvar attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\nvar attr = replace(/<0>(?:\\s*\\(<1>*\\))?/.source, [identifier, roundExpression]);\n\n// string interpolation\nvar formatString = /:[^\\n}]+/.source;\n// multi line\nvar mInterpolationRound = nested(replace(/[^()\"'/]|<0>|\\(<self>*\\)/.source, [regularStringCharacterOrComment]), 2);\nvar mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<0>)*<1>?\\}/.source, [mInterpolationRound, formatString]);\n// single line\nvar sInterpolationRound = nested(replace(/[^()\"'/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<0>|\\(<self>*\\)/.source, [regularStringOrCharacter]), 2);\nvar sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<0>)*<1>?\\}/.source, [sInterpolationRound, formatString]);\n\nvar createInterpolationInside = (interpolation, interpolationRound) => ({\n\t'interpolation': {\n\t\tpattern: re(/((?:^|[^{])(?:\\{\\{)*)<0>/.source, [interpolation]),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'format-string': {\n\t\t\t\tpattern: re(/(^\\{(?:(?![}:])<0>)*)<1>(?=\\}$)/.source, [interpolationRound, formatString]),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /^\\{|\\}$/,\n\t\t\t'expression': {\n\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\talias: 'language-csharp',\n\t\t\t\tinside: cs\n\t\t\t}\n\t\t}\n\t},\n\t'string': /[\\s\\S]+/\n});\n\ninsertBefore(cs, 'class-name', {\n\t'attribute': {\n\t\t// Attributes\n\t\t// [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n\t\tpattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<0>\\s*:\\s*)?<1>(?:\\s*,\\s*<1>)*(?=\\s*\\])/.source, [attrTarget, attr], 'g'),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'target': {\n\t\t\t\tpattern: re(/^<0>(?=\\s*:)/.source, [attrTarget]),\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t'attribute-arguments': {\n\t\t\t\tpattern: re(/\\(<0>*\\)/.source, [roundExpression]),\n\t\t\t\tinside: cs\n\t\t\t},\n\t\t\t'class-name': {\n\t\t\t\tpattern: RegExp(identifier),\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /[,:]/\n\t\t}\n\t}\n});\n\ninsertBefore(cs, 'string', {\n\t'interpolation-string': [\n\t\t{\n\t\t\tpattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<0>|[^\\\\{\"])*\"/.source, [mInterpolation], 'g'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: createInterpolationInside(mInterpolation, mInterpolationRound),\n\t\t},\n\t\t{\n\t\t\tpattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<0>|[^\\\\\"{])*\"/.source, [sInterpolation], 'g'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: createInterpolationInside(sInterpolation, sInterpolationRound),\n\t\t}\n\t],\n\t'char': {\n\t\tpattern: RegExp(character, 'g'),\n\t\tgreedy: true\n\t}\n});\n"],"names":[],"mappings":"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"}