{"version":3,"file":"mongodb.js","sources":["../../../src/prism/languages/mongodb.js"],"sourcesContent":["import { languages } from '../core.js';\nimport { clone, insertBefore } from '../utils/language.js';\nimport './javascript.js';\n\nvar operators = [\n\t// query and projection\n\t'$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or',\n\t'$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects',\n\t'$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet',\n\t'$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice',\n\n\t// update\n\t'$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset',\n\t'$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit',\n\n\t// aggregation pipeline stages\n\t'$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear',\n\t'$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup',\n\t'$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith',\n\t'$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', '$setWindowFields',\n\n\t// aggregation pipeline operators\n\t'$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and',\n\t'$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2',\n\t'$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond',\n\t'$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth',\n\t'$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first',\n\t'$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes',\n\t'$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last',\n\t'$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max',\n\t'$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne',\n\t'$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce',\n\t'$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round',\n\t'$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion',\n\t'$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes',\n\t'$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan',\n\t'$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString',\n\t'$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', '$count', '$dateAdd',\n\t'$dateDiff', '$dateSubtract', '$dateTrunc', '$getField', '$rand', '$sampleRate', '$setField', '$unsetField',\n\n\t// aggregation pipeline query modifiers\n\t'$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query',\n\t'$returnKey', '$showDiskLoc', '$natural',\n].map(operator => operator.replace('$', '\\\\$'));\n\nvar builtinFunctions = [\n\t'ObjectId',\n\t'Code',\n\t'BinData',\n\t'DBRef',\n\t'Timestamp',\n\t'NumberLong',\n\t'NumberDecimal',\n\t'MaxKey',\n\t'MinKey',\n\t'RegExp',\n\t'ISODate',\n\t'UUID',\n];\n\nvar operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n\nvar mongodb = languages.mongodb = clone(languages.js);\n\ninsertBefore(mongodb, 'string', {\n\t'property': {\n\t\tpattern: /(?:([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\\\n])*\\1|(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+)(?=\\s*:)/g,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'keyword': RegExp(`^([\"'])?` + operatorsSource + '(?:\\\\1)?$')\n\t\t}\n\t}\n});\n\nmongodb.string.inside = {\n\turl: {\n\t\t// url pattern\n\t\tpattern: /https?:\\/\\/[\\w@:%.~#=+-]{1,256}\\.[a-z\\d()]{1,6}\\b[()?&/\\w@:%.~#=+-]*/gi,\n\t\tgreedy: true\n\t},\n\tentity: {\n\t\t// ipv4\n\t\tpattern: /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/g,\n\t\tgreedy: true\n\t}\n};\n\ninsertBefore(mongodb, 'constant', {\n\t'builtin': {\n\t\tpattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n\t\talias: 'keyword'\n\t}\n});\n"],"names":[],"mappings":"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"}