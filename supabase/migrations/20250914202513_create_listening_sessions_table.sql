CREATE TABLE IF NOT EXISTS public.listening_sessions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    track_id BIGINT NOT NULL REFERENCES public.tracks(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    last_active_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE (track_id, user_id)
);

-- RLS Policies for listening_sessions
ALTER TABLE public.listening_sessions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow authenticated users to insert their own listening session"
ON public.listening_sessions
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow users to see listening sessions for any track"
ON public.listening_sessions
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Allow users to delete their own listening session"
ON public.listening_sessions
FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Allow users to update their own listening session"
ON public.listening_sessions
FOR UPDATE
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Function to get listener count for a track
CREATE OR REPLACE FUNCTION get_listener_count(p_track_id BIGINT)
RETURNS INT
LANGUAGE plpgsql
AS $$
DECLARE
    listener_count INT;
BEGIN
    SELECT COUNT(DISTINCT user_id)
    INTO listener_count
    FROM public.listening_sessions
    WHERE track_id = p_track_id
      AND last_active_at > (NOW() - INTERVAL '5 minutes'); -- Consider active within the last 5 minutes
    
    RETURN listener_count;
END;
$$;

-- Function to get listener count for a user's tracks
CREATE OR REPLACE FUNCTION get_total_listeners_for_user(p_user_id UUID)
RETURNS INT
LANGUAGE plpgsql
AS $$
DECLARE
    total_listeners INT;
BEGIN
    SELECT COALESCE(SUM(get_listener_count(t.id)), 0)
    INTO total_listeners
    FROM public.tracks t
    WHERE t.user_id = p_user_id;

    RETURN total_listeners;
END;
$$;

-- Function to remove stale listening sessions
CREATE OR REPLACE FUNCTION remove_stale_listening_sessions()
RETURNS VOID
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM public.listening_sessions
    WHERE last_active_at < (NOW() - INTERVAL '10 minutes');
END;
$$;

-- Schedule the cleanup function to run periodically (e.g., every 5 minutes)
-- This requires a cron-like scheduler, which Supabase provides via pg_cron extension.
-- The following is an example, and enabling/configuring pg_cron is done in the Supabase dashboard.
-- SELECT cron.schedule('cleanup-stale-sessions', '*/5 * * * *', 'SELECT remove_stale_listening_sessions()');
